// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_dut_parse_filter_config_4_32_Pipeline_VITIS_LOOP_419_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        filter_cfg_strm_dout,
        filter_cfg_strm_empty_n,
        filter_cfg_strm_read,
        cmpvc_cfg_strms_2_din,
        cmpvc_cfg_strms_2_num_data_valid,
        cmpvc_cfg_strms_2_fifo_cap,
        cmpvc_cfg_strms_2_full_n,
        cmpvc_cfg_strms_2_write,
        cmpvc_cfg_strms_1_din,
        cmpvc_cfg_strms_1_num_data_valid,
        cmpvc_cfg_strms_1_fifo_cap,
        cmpvc_cfg_strms_1_full_n,
        cmpvc_cfg_strms_1_write,
        cmpvc_cfg_strms_0_din,
        cmpvc_cfg_strms_0_num_data_valid,
        cmpvc_cfg_strms_0_fifo_cap,
        cmpvc_cfg_strms_0_full_n,
        cmpvc_cfg_strms_0_write,
        cmpvc_cfg_strms_3_din,
        cmpvc_cfg_strms_3_num_data_valid,
        cmpvc_cfg_strms_3_fifo_cap,
        cmpvc_cfg_strms_3_full_n,
        cmpvc_cfg_strms_3_write
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] filter_cfg_strm_dout;
input   filter_cfg_strm_empty_n;
output   filter_cfg_strm_read;
output  [71:0] cmpvc_cfg_strms_2_din;
input  [2:0] cmpvc_cfg_strms_2_num_data_valid;
input  [2:0] cmpvc_cfg_strms_2_fifo_cap;
input   cmpvc_cfg_strms_2_full_n;
output   cmpvc_cfg_strms_2_write;
output  [71:0] cmpvc_cfg_strms_1_din;
input  [2:0] cmpvc_cfg_strms_1_num_data_valid;
input  [2:0] cmpvc_cfg_strms_1_fifo_cap;
input   cmpvc_cfg_strms_1_full_n;
output   cmpvc_cfg_strms_1_write;
output  [71:0] cmpvc_cfg_strms_0_din;
input  [2:0] cmpvc_cfg_strms_0_num_data_valid;
input  [2:0] cmpvc_cfg_strms_0_fifo_cap;
input   cmpvc_cfg_strms_0_full_n;
output   cmpvc_cfg_strms_0_write;
output  [71:0] cmpvc_cfg_strms_3_din;
input  [2:0] cmpvc_cfg_strms_3_num_data_valid;
input  [2:0] cmpvc_cfg_strms_3_fifo_cap;
input   cmpvc_cfg_strms_3_full_n;
output   cmpvc_cfg_strms_3_write;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg   [1:0] trunc_ln419_reg_162;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln419_fu_102_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage2;
reg   [0:0] icmp_ln419_reg_158;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_subdone;
reg    cmpvc_cfg_strms_0_blk_n;
wire    ap_block_pp0_stage0;
reg    filter_cfg_strm_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
reg    cmpvc_cfg_strms_1_blk_n;
reg    cmpvc_cfg_strms_2_blk_n;
reg    cmpvc_cfg_strms_3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln419_fu_114_p1;
reg   [31:0] cfg_l_reg_166;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] cfg_r_reg_171;
reg    ap_block_pp0_stage2_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [2:0] i_fu_56;
wire   [2:0] add_ln419_fu_108_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_3;
reg    filter_cfg_strm_read_local;
wire   [71:0] or_ln432_5_fu_137_p5;
reg    ap_block_pp0_stage0_01001;
reg    cmpvc_cfg_strms_2_write_local;
reg    cmpvc_cfg_strms_1_write_local;
reg    cmpvc_cfg_strms_0_write_local;
reg    cmpvc_cfg_strms_3_write_local;
wire   [3:0] trunc_ln432_fu_133_p1;
wire   [3:0] cfg_lop_fu_123_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_fu_56 = 3'd0;
#0 ap_done_reg = 1'b0;
end

filter_dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln419_fu_102_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_56 <= add_ln419_fu_108_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_56 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        cfg_l_reg_166 <= filter_cfg_strm_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        cfg_r_reg_171 <= filter_cfg_strm_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln419_reg_158 <= icmp_ln419_fu_102_p2;
        trunc_ln419_reg_162 <= trunc_ln419_fu_114_p1;
    end
end

always @ (*) begin
    if (((icmp_ln419_fu_102_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (trunc_ln419_reg_162 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmpvc_cfg_strms_0_blk_n = cmpvc_cfg_strms_0_full_n;
    end else begin
        cmpvc_cfg_strms_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln419_reg_162 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmpvc_cfg_strms_0_write_local = 1'b1;
    end else begin
        cmpvc_cfg_strms_0_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (trunc_ln419_reg_162 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmpvc_cfg_strms_1_blk_n = cmpvc_cfg_strms_1_full_n;
    end else begin
        cmpvc_cfg_strms_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln419_reg_162 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmpvc_cfg_strms_1_write_local = 1'b1;
    end else begin
        cmpvc_cfg_strms_1_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (trunc_ln419_reg_162 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmpvc_cfg_strms_2_blk_n = cmpvc_cfg_strms_2_full_n;
    end else begin
        cmpvc_cfg_strms_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln419_reg_162 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmpvc_cfg_strms_2_write_local = 1'b1;
    end else begin
        cmpvc_cfg_strms_2_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (trunc_ln419_reg_162 == 2'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmpvc_cfg_strms_3_blk_n = cmpvc_cfg_strms_3_full_n;
    end else begin
        cmpvc_cfg_strms_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln419_reg_162 == 2'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cmpvc_cfg_strms_3_write_local = 1'b1;
    end else begin
        cmpvc_cfg_strms_3_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln419_reg_158 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln419_reg_158 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        filter_cfg_strm_blk_n = filter_cfg_strm_empty_n;
    end else begin
        filter_cfg_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln419_reg_158 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln419_reg_158 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        filter_cfg_strm_read_local = 1'b1;
    end else begin
        filter_cfg_strm_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln419_fu_108_p2 = (ap_sig_allocacmp_i_3 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage2_iter0));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((filter_cfg_strm_empty_n == 1'b0) & (icmp_ln419_reg_158 == 1'd0));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((filter_cfg_strm_empty_n == 1'b0) & (icmp_ln419_reg_158 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((filter_cfg_strm_empty_n == 1'b0) | ((cmpvc_cfg_strms_3_full_n == 1'b0) & (trunc_ln419_reg_162 == 2'd3)) | ((cmpvc_cfg_strms_0_full_n == 1'b0) & (trunc_ln419_reg_162 == 2'd0)) | ((cmpvc_cfg_strms_1_full_n == 1'b0) & (trunc_ln419_reg_162 == 2'd1)) | ((trunc_ln419_reg_162 == 2'd2) & (cmpvc_cfg_strms_2_full_n == 1'b0)));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cfg_lop_fu_123_p4 = {{filter_cfg_strm_dout[7:4]}};

assign cmpvc_cfg_strms_0_din = or_ln432_5_fu_137_p5;

assign cmpvc_cfg_strms_0_write = cmpvc_cfg_strms_0_write_local;

assign cmpvc_cfg_strms_1_din = or_ln432_5_fu_137_p5;

assign cmpvc_cfg_strms_1_write = cmpvc_cfg_strms_1_write_local;

assign cmpvc_cfg_strms_2_din = or_ln432_5_fu_137_p5;

assign cmpvc_cfg_strms_2_write = cmpvc_cfg_strms_2_write_local;

assign cmpvc_cfg_strms_3_din = or_ln432_5_fu_137_p5;

assign cmpvc_cfg_strms_3_write = cmpvc_cfg_strms_3_write_local;

assign filter_cfg_strm_read = filter_cfg_strm_read_local;

assign icmp_ln419_fu_102_p2 = ((ap_sig_allocacmp_i_3 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln432_5_fu_137_p5 = {{{{cfg_r_reg_171}, {cfg_l_reg_166}}, {trunc_ln432_fu_133_p1}}, {cfg_lop_fu_123_p4}};

assign trunc_ln419_fu_114_p1 = ap_sig_allocacmp_i_3[1:0];

assign trunc_ln432_fu_133_p1 = filter_cfg_strm_dout[3:0];

endmodule //filter_dut_parse_filter_config_4_32_Pipeline_VITIS_LOOP_419_1
