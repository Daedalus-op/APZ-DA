// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_dut_var_var_cmp_32_s (
        ap_ready,
        cfg,
        xu,
        yu,
        ap_return,
        ap_rst
);


output   ap_ready;
input  [3:0] cfg;
input  [31:0] xu;
input  [31:0] yu;
output  [0:0] ap_return;
input   ap_rst;

reg   [0:0] ap_phi_mux_ret_10_phi_fu_57_p24;
wire   [3:0] cfg_read_read_fu_48_p2;
wire   [0:0] ret_fu_160_p2;
wire   [0:0] ret_1_fu_153_p2;
wire   [0:0] ret_2_fu_146_p2;
wire   [0:0] grp_fu_92_p2;
wire   [0:0] ret_4_fu_139_p2;
wire   [0:0] ret_5_fu_132_p2;
wire   [0:0] ret_6_fu_119_p2;
wire   [0:0] grp_fu_85_p2;
wire   [0:0] ret_8_fu_112_p2;
wire   [0:0] ret_9_fu_105_p2;
wire   [0:0] icmp_ln203_fu_99_p2;
wire   [0:0] icmp_ln195_fu_126_p2;
wire    ap_ce_reg;

always @ (*) begin
    if ((~(cfg_read_read_fu_48_p2 == 4'd10) & ~(cfg_read_read_fu_48_p2 == 4'd9) & ~(cfg_read_read_fu_48_p2 == 4'd8) & ~(cfg_read_read_fu_48_p2 == 4'd7) & ~(cfg_read_read_fu_48_p2 == 4'd6) & ~(cfg_read_read_fu_48_p2 == 4'd5) & ~(cfg_read_read_fu_48_p2 == 4'd4) & ~(cfg_read_read_fu_48_p2 == 4'd3) & ~(cfg_read_read_fu_48_p2 == 4'd2) & ~(cfg_read_read_fu_48_p2 == 4'd1) & ~(cfg_read_read_fu_48_p2 == 4'd0))) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = 1'd0;
    end else if ((cfg_read_read_fu_48_p2 == 4'd10)) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = ret_9_fu_105_p2;
    end else if ((cfg_read_read_fu_48_p2 == 4'd9)) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = ret_8_fu_112_p2;
    end else if ((cfg_read_read_fu_48_p2 == 4'd8)) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = grp_fu_85_p2;
    end else if ((cfg_read_read_fu_48_p2 == 4'd7)) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = ret_6_fu_119_p2;
    end else if ((cfg_read_read_fu_48_p2 == 4'd6)) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = ret_5_fu_132_p2;
    end else if ((cfg_read_read_fu_48_p2 == 4'd5)) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = ret_4_fu_139_p2;
    end else if ((cfg_read_read_fu_48_p2 == 4'd4)) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = grp_fu_92_p2;
    end else if ((cfg_read_read_fu_48_p2 == 4'd3)) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = ret_2_fu_146_p2;
    end else if ((cfg_read_read_fu_48_p2 == 4'd2)) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = ret_1_fu_153_p2;
    end else if ((cfg_read_read_fu_48_p2 == 4'd1)) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = ret_fu_160_p2;
    end else if ((cfg_read_read_fu_48_p2 == 4'd0)) begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = 1'd1;
    end else begin
        ap_phi_mux_ret_10_phi_fu_57_p24 = 'bx;
    end
end

assign ap_ready = 1'b1;

assign grp_fu_85_p2 = ((xu < yu) ? 1'b1 : 1'b0);

assign grp_fu_92_p2 = (($signed(xu) < $signed(yu)) ? 1'b1 : 1'b0);

assign icmp_ln195_fu_126_p2 = (($signed(yu) < $signed(xu)) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_99_p2 = ((yu < xu) ? 1'b1 : 1'b0);

assign ret_1_fu_153_p2 = ((xu != yu) ? 1'b1 : 1'b0);

assign ret_2_fu_146_p2 = (($signed(xu) > $signed(yu)) ? 1'b1 : 1'b0);

assign ret_4_fu_139_p2 = (grp_fu_92_p2 ^ 1'd1);

assign ret_5_fu_132_p2 = (icmp_ln195_fu_126_p2 ^ 1'd1);

assign ret_6_fu_119_p2 = ((xu > yu) ? 1'b1 : 1'b0);

assign ret_8_fu_112_p2 = (grp_fu_85_p2 ^ 1'd1);

assign ret_9_fu_105_p2 = (icmp_ln203_fu_99_p2 ^ 1'd1);

assign ret_fu_160_p2 = ((xu == yu) ? 1'b1 : 1'b0);

assign ap_return = ap_phi_mux_ret_10_phi_fu_57_p24;

assign cfg_read_read_fu_48_p2 = cfg;

endmodule //filter_dut_var_var_cmp_32_s
