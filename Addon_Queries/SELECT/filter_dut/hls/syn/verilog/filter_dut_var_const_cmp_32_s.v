// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_dut_var_const_cmp_32_s (
        ap_ready,
        cfg_lop,
        cfg_rop,
        cfg_l,
        cfg_r,
        xu,
        ap_return,
        ap_rst
);


output   ap_ready;
input  [3:0] cfg_lop;
input  [3:0] cfg_rop;
input  [31:0] cfg_l;
input  [31:0] cfg_r;
input  [31:0] xu;
output  [0:0] ap_return;
input   ap_rst;

wire   [0:0] icmp_ln135_fu_110_p2;
wire   [0:0] icmp_ln139_fu_128_p2;
wire   [0:0] icmp_ln126_fu_140_p2;
wire   [0:0] icmp_ln126_1_fu_146_p2;
wire   [0:0] icmp_ln126_2_fu_152_p2;
wire   [0:0] icmp_ln126_3_fu_158_p2;
wire   [0:0] icmp_ln126_4_fu_164_p2;
wire   [0:0] icmp_ln126_5_fu_170_p2;
wire   [0:0] icmp_ln126_6_fu_176_p2;
wire   [0:0] bl_6_fu_200_p4;
wire   [0:0] bl_6_fu_200_p6;
wire   [0:0] bl_6_fu_200_p8;
wire   [0:0] bl_6_fu_200_p10;
wire   [0:0] bl_6_fu_200_p12;
wire   [0:0] bl_6_fu_200_p14;
wire   [0:0] bl_6_fu_200_p17;
wire   [6:0] bl_6_fu_200_p18;
wire   [6:0] sel_tmp7_fu_182_p8;
wire   [0:0] icmp_ln153_fu_258_p2;
wire   [0:0] icmp_ln157_fu_276_p2;
wire   [0:0] icmp_ln144_fu_288_p2;
wire   [0:0] icmp_ln144_1_fu_294_p2;
wire   [0:0] icmp_ln144_2_fu_300_p2;
wire   [0:0] icmp_ln144_3_fu_306_p2;
wire   [0:0] icmp_ln144_4_fu_312_p2;
wire   [0:0] icmp_ln144_5_fu_318_p2;
wire   [0:0] icmp_ln144_6_fu_324_p2;
wire   [0:0] br_6_fu_348_p4;
wire   [0:0] br_6_fu_348_p6;
wire   [0:0] br_6_fu_348_p8;
wire   [0:0] br_6_fu_348_p10;
wire   [0:0] br_6_fu_348_p12;
wire   [0:0] br_6_fu_348_p14;
wire   [0:0] br_6_fu_348_p17;
wire   [6:0] br_6_fu_348_p18;
wire   [6:0] sel_tmp_fu_330_p8;
wire   [0:0] bl_6_fu_200_p19;
wire   [0:0] br_6_fu_348_p19;
wire  signed [6:0] bl_6_fu_200_p1;
wire   [6:0] bl_6_fu_200_p3;
wire   [6:0] bl_6_fu_200_p5;
wire   [6:0] bl_6_fu_200_p7;
wire   [6:0] bl_6_fu_200_p9;
wire   [6:0] bl_6_fu_200_p11;
wire   [6:0] bl_6_fu_200_p13;
wire   [6:0] bl_6_fu_200_p15;
wire  signed [6:0] br_6_fu_348_p1;
wire   [6:0] br_6_fu_348_p3;
wire   [6:0] br_6_fu_348_p5;
wire   [6:0] br_6_fu_348_p7;
wire   [6:0] br_6_fu_348_p9;
wire   [6:0] br_6_fu_348_p11;
wire   [6:0] br_6_fu_348_p13;
wire   [6:0] br_6_fu_348_p15;
wire    ap_ce_reg;

(* dissolve_hierarchy = "yes" *) filter_dut_sparsemux_17_7_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 7'h40 ),
    .din0_WIDTH( 1 ),
    .CASE1( 7'h20 ),
    .din1_WIDTH( 1 ),
    .CASE2( 7'h10 ),
    .din2_WIDTH( 1 ),
    .CASE3( 7'h8 ),
    .din3_WIDTH( 1 ),
    .CASE4( 7'h4 ),
    .din4_WIDTH( 1 ),
    .CASE5( 7'h2 ),
    .din5_WIDTH( 1 ),
    .CASE6( 7'h1 ),
    .din6_WIDTH( 1 ),
    .CASE7( 7'h0 ),
    .din7_WIDTH( 1 ),
    .def_WIDTH( 1 ),
    .sel_WIDTH( 7 ),
    .dout_WIDTH( 1 ))
sparsemux_17_7_1_1_1_U34(
    .din0(1'd1),
    .din1(bl_6_fu_200_p4),
    .din2(bl_6_fu_200_p6),
    .din3(bl_6_fu_200_p8),
    .din4(bl_6_fu_200_p10),
    .din5(bl_6_fu_200_p12),
    .din6(bl_6_fu_200_p14),
    .din7(1'd0),
    .def(bl_6_fu_200_p17),
    .sel(bl_6_fu_200_p18),
    .dout(bl_6_fu_200_p19)
);

(* dissolve_hierarchy = "yes" *) filter_dut_sparsemux_17_7_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 7'h40 ),
    .din0_WIDTH( 1 ),
    .CASE1( 7'h20 ),
    .din1_WIDTH( 1 ),
    .CASE2( 7'h10 ),
    .din2_WIDTH( 1 ),
    .CASE3( 7'h8 ),
    .din3_WIDTH( 1 ),
    .CASE4( 7'h4 ),
    .din4_WIDTH( 1 ),
    .CASE5( 7'h2 ),
    .din5_WIDTH( 1 ),
    .CASE6( 7'h1 ),
    .din6_WIDTH( 1 ),
    .CASE7( 7'h0 ),
    .din7_WIDTH( 1 ),
    .def_WIDTH( 1 ),
    .sel_WIDTH( 7 ),
    .dout_WIDTH( 1 ))
sparsemux_17_7_1_1_1_U35(
    .din0(1'd1),
    .din1(br_6_fu_348_p4),
    .din2(br_6_fu_348_p6),
    .din3(br_6_fu_348_p8),
    .din4(br_6_fu_348_p10),
    .din5(br_6_fu_348_p12),
    .din6(br_6_fu_348_p14),
    .din7(1'd0),
    .def(br_6_fu_348_p17),
    .sel(br_6_fu_348_p18),
    .dout(br_6_fu_348_p19)
);

assign ap_ready = 1'b1;

assign icmp_ln135_fu_110_p2 = (($signed(xu) < $signed(cfg_l)) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_128_p2 = ((xu < cfg_l) ? 1'b1 : 1'b0);

assign icmp_ln153_fu_258_p2 = (($signed(cfg_r) < $signed(xu)) ? 1'b1 : 1'b0);

assign icmp_ln157_fu_276_p2 = ((cfg_r < xu) ? 1'b1 : 1'b0);

assign sel_tmp7_fu_182_p8 = {{{{{{{icmp_ln126_fu_140_p2}, {icmp_ln126_1_fu_146_p2}}, {icmp_ln126_2_fu_152_p2}}, {icmp_ln126_3_fu_158_p2}}, {icmp_ln126_4_fu_164_p2}}, {icmp_ln126_5_fu_170_p2}}, {icmp_ln126_6_fu_176_p2}};

assign sel_tmp_fu_330_p8 = {{{{{{{icmp_ln144_fu_288_p2}, {icmp_ln144_1_fu_294_p2}}, {icmp_ln144_2_fu_300_p2}}, {icmp_ln144_3_fu_306_p2}}, {icmp_ln144_4_fu_312_p2}}, {icmp_ln144_5_fu_318_p2}}, {icmp_ln144_6_fu_324_p2}};

assign ap_return = (br_6_fu_348_p19 & bl_6_fu_200_p19);

assign bl_6_fu_200_p10 = (icmp_ln135_fu_110_p2 ^ 1'd1);

assign bl_6_fu_200_p12 = ((xu > cfg_l) ? 1'b1 : 1'b0);

assign bl_6_fu_200_p14 = (icmp_ln139_fu_128_p2 ^ 1'd1);

assign bl_6_fu_200_p17 = 'bx;

assign bl_6_fu_200_p18 = {{{{{{{icmp_ln126_fu_140_p2}, {icmp_ln126_1_fu_146_p2}}, {icmp_ln126_2_fu_152_p2}}, {icmp_ln126_3_fu_158_p2}}, {icmp_ln126_4_fu_164_p2}}, {icmp_ln126_5_fu_170_p2}}, {icmp_ln126_6_fu_176_p2}};

assign bl_6_fu_200_p4 = ((xu == cfg_l) ? 1'b1 : 1'b0);

assign bl_6_fu_200_p6 = ((xu != cfg_l) ? 1'b1 : 1'b0);

assign bl_6_fu_200_p8 = (($signed(xu) > $signed(cfg_l)) ? 1'b1 : 1'b0);

assign br_6_fu_348_p10 = (icmp_ln153_fu_258_p2 ^ 1'd1);

assign br_6_fu_348_p12 = ((xu < cfg_r) ? 1'b1 : 1'b0);

assign br_6_fu_348_p14 = (icmp_ln157_fu_276_p2 ^ 1'd1);

assign br_6_fu_348_p17 = 'bx;

assign br_6_fu_348_p18 = {{{{{{{icmp_ln144_fu_288_p2}, {icmp_ln144_1_fu_294_p2}}, {icmp_ln144_2_fu_300_p2}}, {icmp_ln144_3_fu_306_p2}}, {icmp_ln144_4_fu_312_p2}}, {icmp_ln144_5_fu_318_p2}}, {icmp_ln144_6_fu_324_p2}};

assign br_6_fu_348_p4 = ((xu == cfg_r) ? 1'b1 : 1'b0);

assign br_6_fu_348_p6 = ((xu != cfg_r) ? 1'b1 : 1'b0);

assign br_6_fu_348_p8 = (($signed(xu) < $signed(cfg_r)) ? 1'b1 : 1'b0);

assign icmp_ln126_1_fu_146_p2 = ((cfg_lop == 4'd1) ? 1'b1 : 1'b0);

assign icmp_ln126_2_fu_152_p2 = ((cfg_lop == 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln126_3_fu_158_p2 = ((cfg_lop == 4'd3) ? 1'b1 : 1'b0);

assign icmp_ln126_4_fu_164_p2 = ((cfg_lop == 4'd5) ? 1'b1 : 1'b0);

assign icmp_ln126_5_fu_170_p2 = ((cfg_lop == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln126_6_fu_176_p2 = ((cfg_lop == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_140_p2 = ((cfg_lop == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln144_1_fu_294_p2 = ((cfg_rop == 4'd1) ? 1'b1 : 1'b0);

assign icmp_ln144_2_fu_300_p2 = ((cfg_rop == 4'd2) ? 1'b1 : 1'b0);

assign icmp_ln144_3_fu_306_p2 = ((cfg_rop == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln144_4_fu_312_p2 = ((cfg_rop == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln144_5_fu_318_p2 = ((cfg_rop == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln144_6_fu_324_p2 = ((cfg_rop == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln144_fu_288_p2 = ((cfg_rop == 4'd0) ? 1'b1 : 1'b0);

endmodule //filter_dut_var_const_cmp_32_s
