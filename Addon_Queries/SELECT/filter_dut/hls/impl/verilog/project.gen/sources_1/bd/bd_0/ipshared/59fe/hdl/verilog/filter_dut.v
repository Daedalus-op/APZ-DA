// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="filter_dut_filter_dut,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.489286,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1851,HLS_SYN_LUT=7954,HLS_VERSION=2024_1}" *)

module filter_dut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        filter_cfg_strm_dout,
        filter_cfg_strm_empty_n,
        filter_cfg_strm_read,
        k_strms_0_dout,
        k_strms_0_empty_n,
        k_strms_0_read,
        k_strms_1_dout,
        k_strms_1_empty_n,
        k_strms_1_read,
        k_strms_2_dout,
        k_strms_2_empty_n,
        k_strms_2_read,
        k_strms_3_dout,
        k_strms_3_empty_n,
        k_strms_3_read,
        p_strm_dout,
        p_strm_empty_n,
        p_strm_read,
        e_strm_dout,
        e_strm_empty_n,
        e_strm_read,
        f_strm_din,
        f_strm_full_n,
        f_strm_write,
        e_f_strm_din,
        e_f_strm_full_n,
        e_f_strm_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] filter_cfg_strm_dout;
input   filter_cfg_strm_empty_n;
output   filter_cfg_strm_read;
input  [31:0] k_strms_0_dout;
input   k_strms_0_empty_n;
output   k_strms_0_read;
input  [31:0] k_strms_1_dout;
input   k_strms_1_empty_n;
output   k_strms_1_read;
input  [31:0] k_strms_2_dout;
input   k_strms_2_empty_n;
output   k_strms_2_read;
input  [31:0] k_strms_3_dout;
input   k_strms_3_empty_n;
output   k_strms_3_read;
input  [31:0] p_strm_dout;
input   p_strm_empty_n;
output   p_strm_read;
input  [0:0] e_strm_dout;
input   e_strm_empty_n;
output   e_strm_read;
output  [31:0] f_strm_din;
input   f_strm_full_n;
output   f_strm_write;
output  [0:0] e_f_strm_din;
input   e_f_strm_full_n;
output   e_f_strm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg filter_cfg_strm_read;
reg k_strms_0_read;
reg k_strms_1_read;
reg k_strms_2_read;
reg k_strms_3_read;
reg p_strm_read;
reg e_strm_read;
reg f_strm_write;
reg e_f_strm_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_dynamicFilter_32_32_s_fu_36_filter_cfg_strm_read;
wire    grp_dynamicFilter_32_32_s_fu_36_k_strms_0_read;
wire    grp_dynamicFilter_32_32_s_fu_36_k_strms_1_read;
wire    grp_dynamicFilter_32_32_s_fu_36_k_strms_2_read;
wire    grp_dynamicFilter_32_32_s_fu_36_k_strms_3_read;
wire    grp_dynamicFilter_32_32_s_fu_36_p_strm_read;
wire    grp_dynamicFilter_32_32_s_fu_36_e_strm_read;
wire   [31:0] grp_dynamicFilter_32_32_s_fu_36_f_strm_din;
wire    grp_dynamicFilter_32_32_s_fu_36_f_strm_write;
wire   [0:0] grp_dynamicFilter_32_32_s_fu_36_e_f_strm_din;
wire    grp_dynamicFilter_32_32_s_fu_36_e_f_strm_write;
wire    grp_dynamicFilter_32_32_s_fu_36_ap_start;
wire    grp_dynamicFilter_32_32_s_fu_36_ap_done;
wire    grp_dynamicFilter_32_32_s_fu_36_ap_ready;
wire    grp_dynamicFilter_32_32_s_fu_36_ap_idle;
reg    grp_dynamicFilter_32_32_s_fu_36_ap_continue;
reg    grp_dynamicFilter_32_32_s_fu_36_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready;
reg    ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done;
reg    ap_block_state2_on_subcall_done;
wire    ap_sync_grp_dynamicFilter_32_32_s_fu_36_ap_ready;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_dynamicFilter_32_32_s_fu_36_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done = 1'b0;
end

filter_dut_dynamicFilter_32_32_s grp_dynamicFilter_32_32_s_fu_36(
    .filter_cfg_strm_dout(filter_cfg_strm_dout),
    .filter_cfg_strm_empty_n(filter_cfg_strm_empty_n),
    .filter_cfg_strm_read(grp_dynamicFilter_32_32_s_fu_36_filter_cfg_strm_read),
    .k_strms_0_dout(k_strms_0_dout),
    .k_strms_0_empty_n(k_strms_0_empty_n),
    .k_strms_0_read(grp_dynamicFilter_32_32_s_fu_36_k_strms_0_read),
    .k_strms_1_dout(k_strms_1_dout),
    .k_strms_1_empty_n(k_strms_1_empty_n),
    .k_strms_1_read(grp_dynamicFilter_32_32_s_fu_36_k_strms_1_read),
    .k_strms_2_dout(k_strms_2_dout),
    .k_strms_2_empty_n(k_strms_2_empty_n),
    .k_strms_2_read(grp_dynamicFilter_32_32_s_fu_36_k_strms_2_read),
    .k_strms_3_dout(k_strms_3_dout),
    .k_strms_3_empty_n(k_strms_3_empty_n),
    .k_strms_3_read(grp_dynamicFilter_32_32_s_fu_36_k_strms_3_read),
    .p_strm_dout(p_strm_dout),
    .p_strm_empty_n(p_strm_empty_n),
    .p_strm_read(grp_dynamicFilter_32_32_s_fu_36_p_strm_read),
    .e_strm_dout(e_strm_dout),
    .e_strm_empty_n(e_strm_empty_n),
    .e_strm_read(grp_dynamicFilter_32_32_s_fu_36_e_strm_read),
    .f_strm_din(grp_dynamicFilter_32_32_s_fu_36_f_strm_din),
    .f_strm_full_n(f_strm_full_n),
    .f_strm_write(grp_dynamicFilter_32_32_s_fu_36_f_strm_write),
    .e_f_strm_din(grp_dynamicFilter_32_32_s_fu_36_e_f_strm_din),
    .e_f_strm_full_n(e_f_strm_full_n),
    .e_f_strm_write(grp_dynamicFilter_32_32_s_fu_36_e_f_strm_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dynamicFilter_32_32_s_fu_36_ap_start),
    .ap_done(grp_dynamicFilter_32_32_s_fu_36_ap_done),
    .ap_ready(grp_dynamicFilter_32_32_s_fu_36_ap_ready),
    .ap_idle(grp_dynamicFilter_32_32_s_fu_36_ap_idle),
    .ap_continue(grp_dynamicFilter_32_32_s_fu_36_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done <= 1'b0;
        end else if ((grp_dynamicFilter_32_32_s_fu_36_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready <= 1'b0;
        end else if ((grp_dynamicFilter_32_32_s_fu_36_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dynamicFilter_32_32_s_fu_36_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (ap_sync_grp_dynamicFilter_32_32_s_fu_36_ap_ready == 1'b0)))) begin
            grp_dynamicFilter_32_32_s_fu_36_ap_start_reg <= 1'b1;
        end else if ((grp_dynamicFilter_32_32_s_fu_36_ap_ready == 1'b1)) begin
            grp_dynamicFilter_32_32_s_fu_36_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        e_f_strm_write = grp_dynamicFilter_32_32_s_fu_36_e_f_strm_write;
    end else begin
        e_f_strm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        e_strm_read = grp_dynamicFilter_32_32_s_fu_36_e_strm_read;
    end else begin
        e_strm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_strm_write = grp_dynamicFilter_32_32_s_fu_36_f_strm_write;
    end else begin
        f_strm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        filter_cfg_strm_read = grp_dynamicFilter_32_32_s_fu_36_filter_cfg_strm_read;
    end else begin
        filter_cfg_strm_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        grp_dynamicFilter_32_32_s_fu_36_ap_continue = 1'b1;
    end else begin
        grp_dynamicFilter_32_32_s_fu_36_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_strms_0_read = grp_dynamicFilter_32_32_s_fu_36_k_strms_0_read;
    end else begin
        k_strms_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_strms_1_read = grp_dynamicFilter_32_32_s_fu_36_k_strms_1_read;
    end else begin
        k_strms_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_strms_2_read = grp_dynamicFilter_32_32_s_fu_36_k_strms_2_read;
    end else begin
        k_strms_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_strms_3_read = grp_dynamicFilter_32_32_s_fu_36_k_strms_3_read;
    end else begin
        k_strms_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_strm_read = grp_dynamicFilter_32_32_s_fu_36_p_strm_read;
    end else begin
        p_strm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready & ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done) == 1'b0);
end

assign ap_sync_grp_dynamicFilter_32_32_s_fu_36_ap_ready = (grp_dynamicFilter_32_32_s_fu_36_ap_ready | ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready);

assign e_f_strm_din = grp_dynamicFilter_32_32_s_fu_36_e_f_strm_din;

assign f_strm_din = grp_dynamicFilter_32_32_s_fu_36_f_strm_din;

assign grp_dynamicFilter_32_32_s_fu_36_ap_start = grp_dynamicFilter_32_32_s_fu_36_ap_start_reg;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "filter_dut_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //filter_dut

