-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_dut_compare_ops_32_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cmpvc_cfg_strms_0_dout : IN STD_LOGIC_VECTOR (71 downto 0);
    cmpvc_cfg_strms_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvc_cfg_strms_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvc_cfg_strms_0_empty_n : IN STD_LOGIC;
    cmpvc_cfg_strms_0_read : OUT STD_LOGIC;
    cmpvc_cfg_strms_1_dout : IN STD_LOGIC_VECTOR (71 downto 0);
    cmpvc_cfg_strms_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvc_cfg_strms_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvc_cfg_strms_1_empty_n : IN STD_LOGIC;
    cmpvc_cfg_strms_1_read : OUT STD_LOGIC;
    cmpvc_cfg_strms_2_dout : IN STD_LOGIC_VECTOR (71 downto 0);
    cmpvc_cfg_strms_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvc_cfg_strms_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvc_cfg_strms_2_empty_n : IN STD_LOGIC;
    cmpvc_cfg_strms_2_read : OUT STD_LOGIC;
    cmpvc_cfg_strms_3_dout : IN STD_LOGIC_VECTOR (71 downto 0);
    cmpvc_cfg_strms_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvc_cfg_strms_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvc_cfg_strms_3_empty_n : IN STD_LOGIC;
    cmpvc_cfg_strms_3_read : OUT STD_LOGIC;
    cmpvv_cfg_strms_0_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_0_empty_n : IN STD_LOGIC;
    cmpvv_cfg_strms_0_read : OUT STD_LOGIC;
    cmpvv_cfg_strms_1_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_1_empty_n : IN STD_LOGIC;
    cmpvv_cfg_strms_1_read : OUT STD_LOGIC;
    cmpvv_cfg_strms_2_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_2_empty_n : IN STD_LOGIC;
    cmpvv_cfg_strms_2_read : OUT STD_LOGIC;
    cmpvv_cfg_strms_3_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_3_empty_n : IN STD_LOGIC;
    cmpvv_cfg_strms_3_read : OUT STD_LOGIC;
    cmpvv_cfg_strms_4_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_4_empty_n : IN STD_LOGIC;
    cmpvv_cfg_strms_4_read : OUT STD_LOGIC;
    cmpvv_cfg_strms_5_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_5_empty_n : IN STD_LOGIC;
    cmpvv_cfg_strms_5_read : OUT STD_LOGIC;
    k_strms_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    k_strms_0_empty_n : IN STD_LOGIC;
    k_strms_0_read : OUT STD_LOGIC;
    k_strms_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    k_strms_1_empty_n : IN STD_LOGIC;
    k_strms_1_read : OUT STD_LOGIC;
    k_strms_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    k_strms_2_empty_n : IN STD_LOGIC;
    k_strms_2_read : OUT STD_LOGIC;
    k_strms_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    k_strms_3_empty_n : IN STD_LOGIC;
    k_strms_3_read : OUT STD_LOGIC;
    e_v_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    e_v_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    e_v_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    e_v_strm_empty_n : IN STD_LOGIC;
    e_v_strm_read : OUT STD_LOGIC;
    addr_strm_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    addr_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    addr_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    addr_strm_full_n : IN STD_LOGIC;
    addr_strm_write : OUT STD_LOGIC;
    e_addr_strm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    e_addr_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    e_addr_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    e_addr_strm_full_n : IN STD_LOGIC;
    e_addr_strm_write : OUT STD_LOGIC );
end;


architecture behav of filter_dut_compare_ops_32_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cmpvc_cfg_strms_0_blk_n : STD_LOGIC;
    signal cmpvc_cfg_strms_1_blk_n : STD_LOGIC;
    signal cmpvc_cfg_strms_2_blk_n : STD_LOGIC;
    signal cmpvc_cfg_strms_3_blk_n : STD_LOGIC;
    signal cmpvv_cfg_strms_0_blk_n : STD_LOGIC;
    signal cmpvv_cfg_strms_1_blk_n : STD_LOGIC;
    signal cmpvv_cfg_strms_2_blk_n : STD_LOGIC;
    signal cmpvv_cfg_strms_3_blk_n : STD_LOGIC;
    signal cmpvv_cfg_strms_4_blk_n : STD_LOGIC;
    signal cmpvv_cfg_strms_5_blk_n : STD_LOGIC;
    signal e_v_strm_blk_n : STD_LOGIC;
    signal e_addr_strm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln232_fu_189_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln232_reg_325 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln232_1_reg_330 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln232_2_reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln232_3_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln233_fu_223_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln233_reg_345 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln233_1_reg_350 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln233_2_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln233_3_reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln234_fu_257_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln234_reg_365 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln234_1_reg_370 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln234_2_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln234_3_reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln235_fu_291_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln235_reg_385 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln235_1_reg_390 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln235_2_reg_395 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln235_3_reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmpvv_cfg_strms_0_read_reg_405 : STD_LOGIC_VECTOR (3 downto 0);
    signal cmpvv_cfg_strms_1_read_reg_410 : STD_LOGIC_VECTOR (3 downto 0);
    signal cmpvv_cfg_strms_2_read_reg_415 : STD_LOGIC_VECTOR (3 downto 0);
    signal cmpvv_cfg_strms_3_read_reg_420 : STD_LOGIC_VECTOR (3 downto 0);
    signal cmpvv_cfg_strms_4_read_reg_425 : STD_LOGIC_VECTOR (3 downto 0);
    signal cmpvv_cfg_strms_5_read_reg_430 : STD_LOGIC_VECTOR (3 downto 0);
    signal e_reg_435 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start : STD_LOGIC;
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_done : STD_LOGIC;
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_idle : STD_LOGIC;
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_ready : STD_LOGIC;
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_v_strm_read : STD_LOGIC;
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_0_read : STD_LOGIC;
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_1_read : STD_LOGIC;
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_2_read : STD_LOGIC;
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_3_read : STD_LOGIC;
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_din : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_write : STD_LOGIC;
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_write : STD_LOGIC;
    signal grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal cmpvc_cfg_strms_0_read_local : STD_LOGIC;
    signal cmpvc_cfg_strms_1_read_local : STD_LOGIC;
    signal cmpvc_cfg_strms_2_read_local : STD_LOGIC;
    signal cmpvc_cfg_strms_3_read_local : STD_LOGIC;
    signal cmpvv_cfg_strms_0_read_local : STD_LOGIC;
    signal cmpvv_cfg_strms_1_read_local : STD_LOGIC;
    signal cmpvv_cfg_strms_2_read_local : STD_LOGIC;
    signal cmpvv_cfg_strms_3_read_local : STD_LOGIC;
    signal cmpvv_cfg_strms_4_read_local : STD_LOGIC;
    signal cmpvv_cfg_strms_5_read_local : STD_LOGIC;
    signal e_v_strm_read_local : STD_LOGIC;
    signal e_addr_strm_write_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component filter_dut_compare_ops_32_Pipeline_FILTER_MAIN_LOOP IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        e_v_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        e_v_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        e_v_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        e_v_strm_empty_n : IN STD_LOGIC;
        e_v_strm_read : OUT STD_LOGIC;
        k_strms_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        k_strms_0_empty_n : IN STD_LOGIC;
        k_strms_0_read : OUT STD_LOGIC;
        k_strms_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        k_strms_1_empty_n : IN STD_LOGIC;
        k_strms_1_read : OUT STD_LOGIC;
        k_strms_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        k_strms_2_empty_n : IN STD_LOGIC;
        k_strms_2_read : OUT STD_LOGIC;
        k_strms_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        k_strms_3_empty_n : IN STD_LOGIC;
        k_strms_3_read : OUT STD_LOGIC;
        addr_strm_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        addr_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        addr_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        addr_strm_full_n : IN STD_LOGIC;
        addr_strm_write : OUT STD_LOGIC;
        e_addr_strm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        e_addr_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        e_addr_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        e_addr_strm_full_n : IN STD_LOGIC;
        e_addr_strm_write : OUT STD_LOGIC;
        e : IN STD_LOGIC_VECTOR (0 downto 0);
        empty_18 : IN STD_LOGIC_VECTOR (3 downto 0);
        trunc_ln232_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        trunc_ln232_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        trunc_ln232_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_19 : IN STD_LOGIC_VECTOR (3 downto 0);
        trunc_ln233_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        trunc_ln233_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        trunc_ln233_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_20 : IN STD_LOGIC_VECTOR (3 downto 0);
        trunc_ln234_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        trunc_ln234_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        trunc_ln234_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_21 : IN STD_LOGIC_VECTOR (3 downto 0);
        trunc_ln235_1 : IN STD_LOGIC_VECTOR (3 downto 0);
        trunc_ln235_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        trunc_ln235_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_22 : IN STD_LOGIC_VECTOR (3 downto 0);
        empty_23 : IN STD_LOGIC_VECTOR (3 downto 0);
        empty_24 : IN STD_LOGIC_VECTOR (3 downto 0);
        empty_25 : IN STD_LOGIC_VECTOR (3 downto 0);
        empty_26 : IN STD_LOGIC_VECTOR (3 downto 0);
        empty : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148 : component filter_dut_compare_ops_32_Pipeline_FILTER_MAIN_LOOP
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start,
        ap_done => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_done,
        ap_idle => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_idle,
        ap_ready => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_ready,
        e_v_strm_dout => e_v_strm_dout,
        e_v_strm_num_data_valid => ap_const_lv4_0,
        e_v_strm_fifo_cap => ap_const_lv4_0,
        e_v_strm_empty_n => e_v_strm_empty_n,
        e_v_strm_read => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_v_strm_read,
        k_strms_0_dout => k_strms_0_dout,
        k_strms_0_empty_n => k_strms_0_empty_n,
        k_strms_0_read => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_0_read,
        k_strms_1_dout => k_strms_1_dout,
        k_strms_1_empty_n => k_strms_1_empty_n,
        k_strms_1_read => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_1_read,
        k_strms_2_dout => k_strms_2_dout,
        k_strms_2_empty_n => k_strms_2_empty_n,
        k_strms_2_read => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_2_read,
        k_strms_3_dout => k_strms_3_dout,
        k_strms_3_empty_n => k_strms_3_empty_n,
        k_strms_3_read => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_3_read,
        addr_strm_din => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_din,
        addr_strm_num_data_valid => ap_const_lv4_0,
        addr_strm_fifo_cap => ap_const_lv4_0,
        addr_strm_full_n => addr_strm_full_n,
        addr_strm_write => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_write,
        e_addr_strm_din => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_din,
        e_addr_strm_num_data_valid => ap_const_lv4_0,
        e_addr_strm_fifo_cap => ap_const_lv4_0,
        e_addr_strm_full_n => e_addr_strm_full_n,
        e_addr_strm_write => grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_write,
        e => e_reg_435,
        empty_18 => trunc_ln232_reg_325,
        trunc_ln232_1 => trunc_ln232_1_reg_330,
        trunc_ln232_2 => trunc_ln232_2_reg_335,
        trunc_ln232_3 => trunc_ln232_3_reg_340,
        empty_19 => trunc_ln233_reg_345,
        trunc_ln233_1 => trunc_ln233_1_reg_350,
        trunc_ln233_2 => trunc_ln233_2_reg_355,
        trunc_ln233_3 => trunc_ln233_3_reg_360,
        empty_20 => trunc_ln234_reg_365,
        trunc_ln234_1 => trunc_ln234_1_reg_370,
        trunc_ln234_2 => trunc_ln234_2_reg_375,
        trunc_ln234_3 => trunc_ln234_3_reg_380,
        empty_21 => trunc_ln235_reg_385,
        trunc_ln235_1 => trunc_ln235_1_reg_390,
        trunc_ln235_2 => trunc_ln235_2_reg_395,
        trunc_ln235_3 => trunc_ln235_3_reg_400,
        empty_22 => cmpvv_cfg_strms_0_read_reg_405,
        empty_23 => cmpvv_cfg_strms_1_read_reg_410,
        empty_24 => cmpvv_cfg_strms_2_read_reg_415,
        empty_25 => cmpvv_cfg_strms_3_read_reg_420,
        empty_26 => cmpvv_cfg_strms_4_read_reg_425,
        empty => cmpvv_cfg_strms_5_read_reg_430);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (e_addr_strm_full_n = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_ready = ap_const_logic_1)) then 
                    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                cmpvv_cfg_strms_0_read_reg_405 <= cmpvv_cfg_strms_0_dout;
                cmpvv_cfg_strms_1_read_reg_410 <= cmpvv_cfg_strms_1_dout;
                cmpvv_cfg_strms_2_read_reg_415 <= cmpvv_cfg_strms_2_dout;
                cmpvv_cfg_strms_3_read_reg_420 <= cmpvv_cfg_strms_3_dout;
                cmpvv_cfg_strms_4_read_reg_425 <= cmpvv_cfg_strms_4_dout;
                cmpvv_cfg_strms_5_read_reg_430 <= cmpvv_cfg_strms_5_dout;
                e_reg_435 <= e_v_strm_dout;
                trunc_ln232_1_reg_330 <= cmpvc_cfg_strms_0_dout(7 downto 4);
                trunc_ln232_2_reg_335 <= cmpvc_cfg_strms_0_dout(39 downto 8);
                trunc_ln232_3_reg_340 <= cmpvc_cfg_strms_0_dout(71 downto 40);
                trunc_ln232_reg_325 <= trunc_ln232_fu_189_p1;
                trunc_ln233_1_reg_350 <= cmpvc_cfg_strms_1_dout(7 downto 4);
                trunc_ln233_2_reg_355 <= cmpvc_cfg_strms_1_dout(39 downto 8);
                trunc_ln233_3_reg_360 <= cmpvc_cfg_strms_1_dout(71 downto 40);
                trunc_ln233_reg_345 <= trunc_ln233_fu_223_p1;
                trunc_ln234_1_reg_370 <= cmpvc_cfg_strms_2_dout(7 downto 4);
                trunc_ln234_2_reg_375 <= cmpvc_cfg_strms_2_dout(39 downto 8);
                trunc_ln234_3_reg_380 <= cmpvc_cfg_strms_2_dout(71 downto 40);
                trunc_ln234_reg_365 <= trunc_ln234_fu_257_p1;
                trunc_ln235_1_reg_390 <= cmpvc_cfg_strms_3_dout(7 downto 4);
                trunc_ln235_2_reg_395 <= cmpvc_cfg_strms_3_dout(39 downto 8);
                trunc_ln235_3_reg_400 <= cmpvc_cfg_strms_3_dout(71 downto 40);
                trunc_ln235_reg_385 <= trunc_ln235_fu_291_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, e_addr_strm_full_n, ap_CS_fsm_state4, ap_block_state1, grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (e_addr_strm_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    addr_strm_din <= grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_din;

    addr_strm_write_assign_proc : process(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            addr_strm_write <= grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_write;
        else 
            addr_strm_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_done)
    begin
        if ((grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(e_addr_strm_full_n)
    begin
        if ((e_addr_strm_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, cmpvc_cfg_strms_0_empty_n, cmpvc_cfg_strms_1_empty_n, cmpvc_cfg_strms_2_empty_n, cmpvc_cfg_strms_3_empty_n, cmpvv_cfg_strms_0_empty_n, cmpvv_cfg_strms_1_empty_n, cmpvv_cfg_strms_2_empty_n, cmpvv_cfg_strms_3_empty_n, cmpvv_cfg_strms_4_empty_n, cmpvv_cfg_strms_5_empty_n, e_v_strm_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (cmpvv_cfg_strms_5_empty_n = ap_const_logic_0) or (cmpvv_cfg_strms_4_empty_n = ap_const_logic_0) or (cmpvv_cfg_strms_3_empty_n = ap_const_logic_0) or (cmpvv_cfg_strms_2_empty_n = ap_const_logic_0) or (cmpvv_cfg_strms_1_empty_n = ap_const_logic_0) or (cmpvv_cfg_strms_0_empty_n = ap_const_logic_0) or (cmpvc_cfg_strms_3_empty_n = ap_const_logic_0) or (cmpvc_cfg_strms_2_empty_n = ap_const_logic_0) or (cmpvc_cfg_strms_1_empty_n = ap_const_logic_0) or (cmpvc_cfg_strms_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (e_v_strm_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, e_addr_strm_full_n, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (e_addr_strm_full_n = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(e_addr_strm_full_n, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (e_addr_strm_full_n = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cmpvc_cfg_strms_0_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmpvc_cfg_strms_0_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpvc_cfg_strms_0_blk_n <= cmpvc_cfg_strms_0_empty_n;
        else 
            cmpvc_cfg_strms_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvc_cfg_strms_0_read <= cmpvc_cfg_strms_0_read_local;

    cmpvc_cfg_strms_0_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            cmpvc_cfg_strms_0_read_local <= ap_const_logic_1;
        else 
            cmpvc_cfg_strms_0_read_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvc_cfg_strms_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmpvc_cfg_strms_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpvc_cfg_strms_1_blk_n <= cmpvc_cfg_strms_1_empty_n;
        else 
            cmpvc_cfg_strms_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvc_cfg_strms_1_read <= cmpvc_cfg_strms_1_read_local;

    cmpvc_cfg_strms_1_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            cmpvc_cfg_strms_1_read_local <= ap_const_logic_1;
        else 
            cmpvc_cfg_strms_1_read_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvc_cfg_strms_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmpvc_cfg_strms_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpvc_cfg_strms_2_blk_n <= cmpvc_cfg_strms_2_empty_n;
        else 
            cmpvc_cfg_strms_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvc_cfg_strms_2_read <= cmpvc_cfg_strms_2_read_local;

    cmpvc_cfg_strms_2_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            cmpvc_cfg_strms_2_read_local <= ap_const_logic_1;
        else 
            cmpvc_cfg_strms_2_read_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvc_cfg_strms_3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmpvc_cfg_strms_3_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpvc_cfg_strms_3_blk_n <= cmpvc_cfg_strms_3_empty_n;
        else 
            cmpvc_cfg_strms_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvc_cfg_strms_3_read <= cmpvc_cfg_strms_3_read_local;

    cmpvc_cfg_strms_3_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            cmpvc_cfg_strms_3_read_local <= ap_const_logic_1;
        else 
            cmpvc_cfg_strms_3_read_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvv_cfg_strms_0_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmpvv_cfg_strms_0_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpvv_cfg_strms_0_blk_n <= cmpvv_cfg_strms_0_empty_n;
        else 
            cmpvv_cfg_strms_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_0_read <= cmpvv_cfg_strms_0_read_local;

    cmpvv_cfg_strms_0_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            cmpvv_cfg_strms_0_read_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_0_read_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvv_cfg_strms_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmpvv_cfg_strms_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpvv_cfg_strms_1_blk_n <= cmpvv_cfg_strms_1_empty_n;
        else 
            cmpvv_cfg_strms_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_1_read <= cmpvv_cfg_strms_1_read_local;

    cmpvv_cfg_strms_1_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            cmpvv_cfg_strms_1_read_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_1_read_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvv_cfg_strms_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmpvv_cfg_strms_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpvv_cfg_strms_2_blk_n <= cmpvv_cfg_strms_2_empty_n;
        else 
            cmpvv_cfg_strms_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_2_read <= cmpvv_cfg_strms_2_read_local;

    cmpvv_cfg_strms_2_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            cmpvv_cfg_strms_2_read_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_2_read_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvv_cfg_strms_3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmpvv_cfg_strms_3_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpvv_cfg_strms_3_blk_n <= cmpvv_cfg_strms_3_empty_n;
        else 
            cmpvv_cfg_strms_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_3_read <= cmpvv_cfg_strms_3_read_local;

    cmpvv_cfg_strms_3_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            cmpvv_cfg_strms_3_read_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_3_read_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvv_cfg_strms_4_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmpvv_cfg_strms_4_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpvv_cfg_strms_4_blk_n <= cmpvv_cfg_strms_4_empty_n;
        else 
            cmpvv_cfg_strms_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_4_read <= cmpvv_cfg_strms_4_read_local;

    cmpvv_cfg_strms_4_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            cmpvv_cfg_strms_4_read_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_4_read_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvv_cfg_strms_5_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cmpvv_cfg_strms_5_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cmpvv_cfg_strms_5_blk_n <= cmpvv_cfg_strms_5_empty_n;
        else 
            cmpvv_cfg_strms_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_5_read <= cmpvv_cfg_strms_5_read_local;

    cmpvv_cfg_strms_5_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            cmpvv_cfg_strms_5_read_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_5_read_local <= ap_const_logic_0;
        end if; 
    end process;


    e_addr_strm_blk_n_assign_proc : process(e_addr_strm_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            e_addr_strm_blk_n <= e_addr_strm_full_n;
        else 
            e_addr_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_addr_strm_din_assign_proc : process(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_din, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            e_addr_strm_din <= grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_din;
        else 
            e_addr_strm_din <= ap_const_lv1_1;
        end if; 
    end process;


    e_addr_strm_write_assign_proc : process(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_write, ap_CS_fsm_state3, e_addr_strm_write_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            e_addr_strm_write <= grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_write;
        else 
            e_addr_strm_write <= e_addr_strm_write_local;
        end if; 
    end process;


    e_addr_strm_write_local_assign_proc : process(e_addr_strm_full_n, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (e_addr_strm_full_n = ap_const_logic_1))) then 
            e_addr_strm_write_local <= ap_const_logic_1;
        else 
            e_addr_strm_write_local <= ap_const_logic_0;
        end if; 
    end process;


    e_v_strm_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, e_v_strm_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_v_strm_blk_n <= e_v_strm_empty_n;
        else 
            e_v_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_v_strm_read_assign_proc : process(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_v_strm_read, ap_CS_fsm_state3, e_v_strm_read_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            e_v_strm_read <= grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_v_strm_read;
        else 
            e_v_strm_read <= e_v_strm_read_local;
        end if; 
    end process;


    e_v_strm_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            e_v_strm_read_local <= ap_const_logic_1;
        else 
            e_v_strm_read_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start <= grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg;

    k_strms_0_read_assign_proc : process(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_0_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            k_strms_0_read <= grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_0_read;
        else 
            k_strms_0_read <= ap_const_logic_0;
        end if; 
    end process;


    k_strms_1_read_assign_proc : process(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_1_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            k_strms_1_read <= grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_1_read;
        else 
            k_strms_1_read <= ap_const_logic_0;
        end if; 
    end process;


    k_strms_2_read_assign_proc : process(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_2_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            k_strms_2_read <= grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_2_read;
        else 
            k_strms_2_read <= ap_const_logic_0;
        end if; 
    end process;


    k_strms_3_read_assign_proc : process(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_3_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            k_strms_3_read <= grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_3_read;
        else 
            k_strms_3_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln232_fu_189_p1 <= cmpvc_cfg_strms_0_dout(4 - 1 downto 0);
    trunc_ln233_fu_223_p1 <= cmpvc_cfg_strms_1_dout(4 - 1 downto 0);
    trunc_ln234_fu_257_p1 <= cmpvc_cfg_strms_2_dout(4 - 1 downto 0);
    trunc_ln235_fu_291_p1 <= cmpvc_cfg_strms_3_dout(4 - 1 downto 0);
end behav;
