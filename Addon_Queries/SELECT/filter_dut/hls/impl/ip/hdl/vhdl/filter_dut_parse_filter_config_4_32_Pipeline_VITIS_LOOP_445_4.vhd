-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_dut_parse_filter_config_4_32_Pipeline_VITIS_LOOP_445_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    filter_cfg_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_cfg_strm_empty_n : IN STD_LOGIC;
    filter_cfg_strm_read : OUT STD_LOGIC;
    cmpvv_cfg_strms_4_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_4_full_n : IN STD_LOGIC;
    cmpvv_cfg_strms_4_write : OUT STD_LOGIC;
    cmpvv_cfg_strms_3_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_3_full_n : IN STD_LOGIC;
    cmpvv_cfg_strms_3_write : OUT STD_LOGIC;
    cmpvv_cfg_strms_2_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_2_full_n : IN STD_LOGIC;
    cmpvv_cfg_strms_2_write : OUT STD_LOGIC;
    cmpvv_cfg_strms_1_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_1_full_n : IN STD_LOGIC;
    cmpvv_cfg_strms_1_write : OUT STD_LOGIC;
    cmpvv_cfg_strms_0_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_0_full_n : IN STD_LOGIC;
    cmpvv_cfg_strms_0_write : OUT STD_LOGIC;
    cmpvv_cfg_strms_5_din : OUT STD_LOGIC_VECTOR (3 downto 0);
    cmpvv_cfg_strms_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    cmpvv_cfg_strms_5_full_n : IN STD_LOGIC;
    cmpvv_cfg_strms_5_write : OUT STD_LOGIC );
end;


architecture behav of filter_dut_parse_filter_config_4_32_Pipeline_VITIS_LOOP_445_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln445_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln446_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op37_read_state2 : BOOLEAN;
    signal i_reg_265 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_predicate_op51_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln445_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal cmpvv_cfg_strms_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal filter_cfg_strm_blk_n : STD_LOGIC;
    signal cmpvv_cfg_strms_1_blk_n : STD_LOGIC;
    signal cmpvv_cfg_strms_2_blk_n : STD_LOGIC;
    signal cmpvv_cfg_strms_3_blk_n : STD_LOGIC;
    signal cmpvv_cfg_strms_4_blk_n : STD_LOGIC;
    signal cmpvv_cfg_strms_5_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln446_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_dw_2_phi_fu_135_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_dw_2_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln445_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dw_fu_72 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    signal i_1_fu_76 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln445_fu_161_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal nb_fu_80 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal nb_1_fu_194_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_nb_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_nb_load_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal filter_cfg_strm_read_local : STD_LOGIC;
    signal cfg_fu_218_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal cmpvv_cfg_strms_4_write_local : STD_LOGIC;
    signal cmpvv_cfg_strms_3_write_local : STD_LOGIC;
    signal cmpvv_cfg_strms_2_write_local : STD_LOGIC;
    signal cmpvv_cfg_strms_1_write_local : STD_LOGIC;
    signal cmpvv_cfg_strms_0_write_local : STD_LOGIC;
    signal cmpvv_cfg_strms_5_write_local : STD_LOGIC;
    signal tmp_fu_170_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_320 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component filter_dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component filter_dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln445_fu_155_p2 = ap_const_lv1_0))) then 
                    i_1_fu_76 <= add_ln445_fu_161_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_76 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    nb_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln445_fu_155_p2 = ap_const_lv1_0))) then 
                    nb_fu_80 <= nb_1_fu_194_p2;
                elsif ((ap_const_boolean_1 = ap_condition_320)) then 
                    nb_fu_80 <= ap_const_lv8_20;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    nb_fu_80 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dw_fu_72 <= ap_phi_mux_dw_2_phi_fu_135_p4(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_265 <= ap_sig_allocacmp_i;
                icmp_ln445_reg_269 <= icmp_ln445_fu_155_p2;
                icmp_ln446_reg_273 <= icmp_ln446_fu_180_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln445_fu_161_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(filter_cfg_strm_empty_n, ap_predicate_op37_read_state2, cmpvv_cfg_strms_4_full_n, i_reg_265, cmpvv_cfg_strms_3_full_n, cmpvv_cfg_strms_2_full_n, cmpvv_cfg_strms_1_full_n, cmpvv_cfg_strms_0_full_n, cmpvv_cfg_strms_5_full_n, ap_predicate_op51_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((cmpvv_cfg_strms_0_full_n = ap_const_logic_0) and (i_reg_265 = ap_const_lv3_0)) or ((cmpvv_cfg_strms_1_full_n = ap_const_logic_0) and (i_reg_265 = ap_const_lv3_1)) or ((cmpvv_cfg_strms_2_full_n = ap_const_logic_0) and (i_reg_265 = ap_const_lv3_2)) or ((cmpvv_cfg_strms_3_full_n = ap_const_logic_0) and (i_reg_265 = ap_const_lv3_3)) or ((i_reg_265 = ap_const_lv3_4) and (cmpvv_cfg_strms_4_full_n = ap_const_logic_0)) or ((ap_predicate_op37_read_state2 = ap_const_boolean_1) and (filter_cfg_strm_empty_n = ap_const_logic_0)) or ((ap_predicate_op51_write_state2 = ap_const_boolean_1) and (cmpvv_cfg_strms_5_full_n = ap_const_logic_0)));
    end process;


    ap_condition_320_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln445_fu_155_p2, icmp_ln446_fu_180_p2)
    begin
                ap_condition_320 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln446_fu_180_p2 = ap_const_lv1_1) and (icmp_ln445_fu_155_p2 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln445_fu_155_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln445_fu_155_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_dw_2_phi_fu_135_p4_assign_proc : process(filter_cfg_strm_dout, icmp_ln445_reg_269, icmp_ln446_reg_273, ap_phi_reg_pp0_iter1_dw_2_reg_132, zext_ln445_fu_213_p1)
    begin
        if ((icmp_ln445_reg_269 = ap_const_lv1_0)) then
            if ((icmp_ln446_reg_273 = ap_const_lv1_0)) then 
                ap_phi_mux_dw_2_phi_fu_135_p4 <= zext_ln445_fu_213_p1;
            elsif ((icmp_ln446_reg_273 = ap_const_lv1_1)) then 
                ap_phi_mux_dw_2_phi_fu_135_p4 <= filter_cfg_strm_dout;
            else 
                ap_phi_mux_dw_2_phi_fu_135_p4 <= ap_phi_reg_pp0_iter1_dw_2_reg_132;
            end if;
        else 
            ap_phi_mux_dw_2_phi_fu_135_p4 <= ap_phi_reg_pp0_iter1_dw_2_reg_132;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_dw_2_reg_132 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op37_read_state2_assign_proc : process(icmp_ln445_reg_269, icmp_ln446_reg_273)
    begin
                ap_predicate_op37_read_state2 <= ((icmp_ln446_reg_273 = ap_const_lv1_1) and (icmp_ln445_reg_269 = ap_const_lv1_0));
    end process;


    ap_predicate_op51_write_state2_assign_proc : process(i_reg_265)
    begin
                ap_predicate_op51_write_state2 <= (not((i_reg_265 = ap_const_lv3_0)) and not((i_reg_265 = ap_const_lv3_1)) and not((i_reg_265 = ap_const_lv3_2)) and not((i_reg_265 = ap_const_lv3_3)) and not((i_reg_265 = ap_const_lv3_4)));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_76, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_nb_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, nb_fu_80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_nb_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_nb_load <= nb_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_nb_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, nb_fu_80, ap_condition_320)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_const_boolean_1 = ap_condition_320)) then 
                ap_sig_allocacmp_nb_load_1 <= ap_const_lv8_20;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_nb_load_1 <= ap_const_lv8_0;
            else 
                ap_sig_allocacmp_nb_load_1 <= nb_fu_80;
            end if;
        else 
            ap_sig_allocacmp_nb_load_1 <= nb_fu_80;
        end if; 
    end process;

    cfg_fu_218_p1 <= ap_phi_mux_dw_2_phi_fu_135_p4(4 - 1 downto 0);

    cmpvv_cfg_strms_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_reg_265, cmpvv_cfg_strms_0_full_n, ap_block_pp0_stage0)
    begin
        if (((i_reg_265 = ap_const_lv3_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            cmpvv_cfg_strms_0_blk_n <= cmpvv_cfg_strms_0_full_n;
        else 
            cmpvv_cfg_strms_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_0_din <= cfg_fu_218_p1;
    cmpvv_cfg_strms_0_write <= cmpvv_cfg_strms_0_write_local;

    cmpvv_cfg_strms_0_write_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_reg_265, ap_block_pp0_stage0_11001)
    begin
        if (((i_reg_265 = ap_const_lv3_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cmpvv_cfg_strms_0_write_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_0_write_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvv_cfg_strms_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_reg_265, cmpvv_cfg_strms_1_full_n, ap_block_pp0_stage0)
    begin
        if (((i_reg_265 = ap_const_lv3_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            cmpvv_cfg_strms_1_blk_n <= cmpvv_cfg_strms_1_full_n;
        else 
            cmpvv_cfg_strms_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_1_din <= cfg_fu_218_p1;
    cmpvv_cfg_strms_1_write <= cmpvv_cfg_strms_1_write_local;

    cmpvv_cfg_strms_1_write_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_reg_265, ap_block_pp0_stage0_11001)
    begin
        if (((i_reg_265 = ap_const_lv3_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cmpvv_cfg_strms_1_write_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_1_write_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvv_cfg_strms_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_reg_265, cmpvv_cfg_strms_2_full_n, ap_block_pp0_stage0)
    begin
        if (((i_reg_265 = ap_const_lv3_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            cmpvv_cfg_strms_2_blk_n <= cmpvv_cfg_strms_2_full_n;
        else 
            cmpvv_cfg_strms_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_2_din <= cfg_fu_218_p1;
    cmpvv_cfg_strms_2_write <= cmpvv_cfg_strms_2_write_local;

    cmpvv_cfg_strms_2_write_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_reg_265, ap_block_pp0_stage0_11001)
    begin
        if (((i_reg_265 = ap_const_lv3_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cmpvv_cfg_strms_2_write_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_2_write_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvv_cfg_strms_3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_reg_265, cmpvv_cfg_strms_3_full_n, ap_block_pp0_stage0)
    begin
        if (((i_reg_265 = ap_const_lv3_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            cmpvv_cfg_strms_3_blk_n <= cmpvv_cfg_strms_3_full_n;
        else 
            cmpvv_cfg_strms_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_3_din <= cfg_fu_218_p1;
    cmpvv_cfg_strms_3_write <= cmpvv_cfg_strms_3_write_local;

    cmpvv_cfg_strms_3_write_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_reg_265, ap_block_pp0_stage0_11001)
    begin
        if (((i_reg_265 = ap_const_lv3_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cmpvv_cfg_strms_3_write_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_3_write_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvv_cfg_strms_4_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, cmpvv_cfg_strms_4_full_n, i_reg_265, ap_block_pp0_stage0)
    begin
        if (((i_reg_265 = ap_const_lv3_4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            cmpvv_cfg_strms_4_blk_n <= cmpvv_cfg_strms_4_full_n;
        else 
            cmpvv_cfg_strms_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_4_din <= cfg_fu_218_p1;
    cmpvv_cfg_strms_4_write <= cmpvv_cfg_strms_4_write_local;

    cmpvv_cfg_strms_4_write_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_reg_265, ap_block_pp0_stage0_11001)
    begin
        if (((i_reg_265 = ap_const_lv3_4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            cmpvv_cfg_strms_4_write_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_4_write_local <= ap_const_logic_0;
        end if; 
    end process;


    cmpvv_cfg_strms_5_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, cmpvv_cfg_strms_5_full_n, ap_predicate_op51_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op51_write_state2 = ap_const_boolean_1))) then 
            cmpvv_cfg_strms_5_blk_n <= cmpvv_cfg_strms_5_full_n;
        else 
            cmpvv_cfg_strms_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cmpvv_cfg_strms_5_din <= cfg_fu_218_p1;
    cmpvv_cfg_strms_5_write <= cmpvv_cfg_strms_5_write_local;

    cmpvv_cfg_strms_5_write_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op51_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op51_write_state2 = ap_const_boolean_1))) then 
            cmpvv_cfg_strms_5_write_local <= ap_const_logic_1;
        else 
            cmpvv_cfg_strms_5_write_local <= ap_const_logic_0;
        end if; 
    end process;


    filter_cfg_strm_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, filter_cfg_strm_empty_n, ap_predicate_op37_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op37_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            filter_cfg_strm_blk_n <= filter_cfg_strm_empty_n;
        else 
            filter_cfg_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    filter_cfg_strm_read <= filter_cfg_strm_read_local;

    filter_cfg_strm_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op37_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op37_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            filter_cfg_strm_read_local <= ap_const_logic_1;
        else 
            filter_cfg_strm_read_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln445_fu_155_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_6) else "0";
    icmp_ln446_fu_180_p2 <= "1" when (signed(tmp_fu_170_p4) < signed(ap_const_lv6_1)) else "0";
    nb_1_fu_194_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_nb_load_1) + unsigned(ap_const_lv8_FC));
    tmp_fu_170_p4 <= ap_sig_allocacmp_nb_load(7 downto 2);
    zext_ln445_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dw_fu_72),32));
end behav;
