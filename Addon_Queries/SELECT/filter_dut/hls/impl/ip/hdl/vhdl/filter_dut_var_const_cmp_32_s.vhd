-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_dut_var_const_cmp_32_s is
port (
    ap_ready : OUT STD_LOGIC;
    cfg_lop : IN STD_LOGIC_VECTOR (3 downto 0);
    cfg_rop : IN STD_LOGIC_VECTOR (3 downto 0);
    cfg_l : IN STD_LOGIC_VECTOR (31 downto 0);
    cfg_r : IN STD_LOGIC_VECTOR (31 downto 0);
    xu : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_rst : IN STD_LOGIC );
end;


architecture behav of filter_dut_var_const_cmp_32_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal icmp_ln135_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln139_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_1_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_2_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_3_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_4_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_5_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln126_6_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bl_6_fu_200_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal bl_6_fu_200_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal bl_6_fu_200_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal bl_6_fu_200_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal bl_6_fu_200_p12 : STD_LOGIC_VECTOR (0 downto 0);
    signal bl_6_fu_200_p14 : STD_LOGIC_VECTOR (0 downto 0);
    signal bl_6_fu_200_p17 : STD_LOGIC_VECTOR (0 downto 0);
    signal bl_6_fu_200_p18 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp7_fu_182_p8 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln153_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_2_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_3_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_4_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_5_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln144_6_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal br_6_fu_348_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal br_6_fu_348_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal br_6_fu_348_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal br_6_fu_348_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal br_6_fu_348_p12 : STD_LOGIC_VECTOR (0 downto 0);
    signal br_6_fu_348_p14 : STD_LOGIC_VECTOR (0 downto 0);
    signal br_6_fu_348_p17 : STD_LOGIC_VECTOR (0 downto 0);
    signal br_6_fu_348_p18 : STD_LOGIC_VECTOR (6 downto 0);
    signal sel_tmp_fu_330_p8 : STD_LOGIC_VECTOR (6 downto 0);
    signal bl_6_fu_200_p19 : STD_LOGIC_VECTOR (0 downto 0);
    signal br_6_fu_348_p19 : STD_LOGIC_VECTOR (0 downto 0);
    signal bl_6_fu_200_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal bl_6_fu_200_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal bl_6_fu_200_p5 : STD_LOGIC_VECTOR (6 downto 0);
    signal bl_6_fu_200_p7 : STD_LOGIC_VECTOR (6 downto 0);
    signal bl_6_fu_200_p9 : STD_LOGIC_VECTOR (6 downto 0);
    signal bl_6_fu_200_p11 : STD_LOGIC_VECTOR (6 downto 0);
    signal bl_6_fu_200_p13 : STD_LOGIC_VECTOR (6 downto 0);
    signal bl_6_fu_200_p15 : STD_LOGIC_VECTOR (6 downto 0);
    signal br_6_fu_348_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal br_6_fu_348_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal br_6_fu_348_p5 : STD_LOGIC_VECTOR (6 downto 0);
    signal br_6_fu_348_p7 : STD_LOGIC_VECTOR (6 downto 0);
    signal br_6_fu_348_p9 : STD_LOGIC_VECTOR (6 downto 0);
    signal br_6_fu_348_p11 : STD_LOGIC_VECTOR (6 downto 0);
    signal br_6_fu_348_p13 : STD_LOGIC_VECTOR (6 downto 0);
    signal br_6_fu_348_p15 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component filter_dut_sparsemux_17_7_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (6 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (6 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (6 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (6 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (6 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (6 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (6 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (6 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        def : IN STD_LOGIC_VECTOR (0 downto 0);
        sel : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    sparsemux_17_7_1_1_1_U34 : component filter_dut_sparsemux_17_7_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "1000000",
        din0_WIDTH => 1,
        CASE1 => "0100000",
        din1_WIDTH => 1,
        CASE2 => "0010000",
        din2_WIDTH => 1,
        CASE3 => "0001000",
        din3_WIDTH => 1,
        CASE4 => "0000100",
        din4_WIDTH => 1,
        CASE5 => "0000010",
        din5_WIDTH => 1,
        CASE6 => "0000001",
        din6_WIDTH => 1,
        CASE7 => "0000000",
        din7_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 7,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => bl_6_fu_200_p4,
        din2 => bl_6_fu_200_p6,
        din3 => bl_6_fu_200_p8,
        din4 => bl_6_fu_200_p10,
        din5 => bl_6_fu_200_p12,
        din6 => bl_6_fu_200_p14,
        din7 => ap_const_lv1_0,
        def => bl_6_fu_200_p17,
        sel => bl_6_fu_200_p18,
        dout => bl_6_fu_200_p19);

    sparsemux_17_7_1_1_1_U35 : component filter_dut_sparsemux_17_7_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "1000000",
        din0_WIDTH => 1,
        CASE1 => "0100000",
        din1_WIDTH => 1,
        CASE2 => "0010000",
        din2_WIDTH => 1,
        CASE3 => "0001000",
        din3_WIDTH => 1,
        CASE4 => "0000100",
        din4_WIDTH => 1,
        CASE5 => "0000010",
        din5_WIDTH => 1,
        CASE6 => "0000001",
        din6_WIDTH => 1,
        CASE7 => "0000000",
        din7_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 7,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_1,
        din1 => br_6_fu_348_p4,
        din2 => br_6_fu_348_p6,
        din3 => br_6_fu_348_p8,
        din4 => br_6_fu_348_p10,
        din5 => br_6_fu_348_p12,
        din6 => br_6_fu_348_p14,
        din7 => ap_const_lv1_0,
        def => br_6_fu_348_p17,
        sel => br_6_fu_348_p18,
        dout => br_6_fu_348_p19);




    ap_ready <= ap_const_logic_1;
    ap_return <= (br_6_fu_348_p19 and bl_6_fu_200_p19);
    bl_6_fu_200_p10 <= (icmp_ln135_fu_110_p2 xor ap_const_lv1_1);
    bl_6_fu_200_p12 <= "1" when (unsigned(xu) > unsigned(cfg_l)) else "0";
    bl_6_fu_200_p14 <= (icmp_ln139_fu_128_p2 xor ap_const_lv1_1);
    bl_6_fu_200_p17 <= "X";
    bl_6_fu_200_p18 <= ((((((icmp_ln126_fu_140_p2 & icmp_ln126_1_fu_146_p2) & icmp_ln126_2_fu_152_p2) & icmp_ln126_3_fu_158_p2) & icmp_ln126_4_fu_164_p2) & icmp_ln126_5_fu_170_p2) & icmp_ln126_6_fu_176_p2);
    bl_6_fu_200_p4 <= "1" when (xu = cfg_l) else "0";
    bl_6_fu_200_p6 <= "0" when (xu = cfg_l) else "1";
    bl_6_fu_200_p8 <= "1" when (signed(xu) > signed(cfg_l)) else "0";
    br_6_fu_348_p10 <= (icmp_ln153_fu_258_p2 xor ap_const_lv1_1);
    br_6_fu_348_p12 <= "1" when (unsigned(xu) < unsigned(cfg_r)) else "0";
    br_6_fu_348_p14 <= (icmp_ln157_fu_276_p2 xor ap_const_lv1_1);
    br_6_fu_348_p17 <= "X";
    br_6_fu_348_p18 <= ((((((icmp_ln144_fu_288_p2 & icmp_ln144_1_fu_294_p2) & icmp_ln144_2_fu_300_p2) & icmp_ln144_3_fu_306_p2) & icmp_ln144_4_fu_312_p2) & icmp_ln144_5_fu_318_p2) & icmp_ln144_6_fu_324_p2);
    br_6_fu_348_p4 <= "1" when (xu = cfg_r) else "0";
    br_6_fu_348_p6 <= "0" when (xu = cfg_r) else "1";
    br_6_fu_348_p8 <= "1" when (signed(xu) < signed(cfg_r)) else "0";
    icmp_ln126_1_fu_146_p2 <= "1" when (cfg_lop = ap_const_lv4_1) else "0";
    icmp_ln126_2_fu_152_p2 <= "1" when (cfg_lop = ap_const_lv4_2) else "0";
    icmp_ln126_3_fu_158_p2 <= "1" when (cfg_lop = ap_const_lv4_3) else "0";
    icmp_ln126_4_fu_164_p2 <= "1" when (cfg_lop = ap_const_lv4_5) else "0";
    icmp_ln126_5_fu_170_p2 <= "1" when (cfg_lop = ap_const_lv4_7) else "0";
    icmp_ln126_6_fu_176_p2 <= "1" when (cfg_lop = ap_const_lv4_9) else "0";
    icmp_ln126_fu_140_p2 <= "1" when (cfg_lop = ap_const_lv4_0) else "0";
    icmp_ln135_fu_110_p2 <= "1" when (signed(xu) < signed(cfg_l)) else "0";
    icmp_ln139_fu_128_p2 <= "1" when (unsigned(xu) < unsigned(cfg_l)) else "0";
    icmp_ln144_1_fu_294_p2 <= "1" when (cfg_rop = ap_const_lv4_1) else "0";
    icmp_ln144_2_fu_300_p2 <= "1" when (cfg_rop = ap_const_lv4_2) else "0";
    icmp_ln144_3_fu_306_p2 <= "1" when (cfg_rop = ap_const_lv4_4) else "0";
    icmp_ln144_4_fu_312_p2 <= "1" when (cfg_rop = ap_const_lv4_6) else "0";
    icmp_ln144_5_fu_318_p2 <= "1" when (cfg_rop = ap_const_lv4_8) else "0";
    icmp_ln144_6_fu_324_p2 <= "1" when (cfg_rop = ap_const_lv4_A) else "0";
    icmp_ln144_fu_288_p2 <= "1" when (cfg_rop = ap_const_lv4_0) else "0";
    icmp_ln153_fu_258_p2 <= "1" when (signed(cfg_r) < signed(xu)) else "0";
    icmp_ln157_fu_276_p2 <= "1" when (unsigned(cfg_r) < unsigned(xu)) else "0";
    sel_tmp7_fu_182_p8 <= ((((((icmp_ln126_fu_140_p2 & icmp_ln126_1_fu_146_p2) & icmp_ln126_2_fu_152_p2) & icmp_ln126_3_fu_158_p2) & icmp_ln126_4_fu_164_p2) & icmp_ln126_5_fu_170_p2) & icmp_ln126_6_fu_176_p2);
    sel_tmp_fu_330_p8 <= ((((((icmp_ln144_fu_288_p2 & icmp_ln144_1_fu_294_p2) & icmp_ln144_2_fu_300_p2) & icmp_ln144_3_fu_306_p2) & icmp_ln144_4_fu_312_p2) & icmp_ln144_5_fu_318_p2) & icmp_ln144_6_fu_324_p2);
end behav;
