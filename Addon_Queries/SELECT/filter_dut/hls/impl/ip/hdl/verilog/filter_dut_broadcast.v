// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_dut_broadcast (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        e_strm_dout,
        e_strm_empty_n,
        e_strm_read,
        e_v_strm_din,
        e_v_strm_num_data_valid,
        e_v_strm_fifo_cap,
        e_v_strm_full_n,
        e_v_strm_write,
        e_p_strm_din,
        e_p_strm_num_data_valid,
        e_p_strm_fifo_cap,
        e_p_strm_full_n,
        e_p_strm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [0:0] e_strm_dout;
input   e_strm_empty_n;
output   e_strm_read;
output  [0:0] e_v_strm_din;
input  [3:0] e_v_strm_num_data_valid;
input  [3:0] e_v_strm_fifo_cap;
input   e_v_strm_full_n;
output   e_v_strm_write;
output  [0:0] e_p_strm_din;
input  [5:0] e_p_strm_num_data_valid;
input  [5:0] e_p_strm_fifo_cap;
input   e_p_strm_full_n;
output   e_p_strm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg e_strm_read;
reg[0:0] e_v_strm_din;
reg e_v_strm_write;
reg[0:0] e_p_strm_din;
reg e_p_strm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    e_strm_blk_n;
reg    e_v_strm_blk_n;
wire    ap_CS_fsm_state4;
reg    e_p_strm_blk_n;
reg   [0:0] e_reg_59;
reg    ap_block_state1;
wire    grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_start;
wire    grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_done;
wire    grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_idle;
wire    grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_ready;
wire    grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_strm_read;
wire   [0:0] grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_v_strm_din;
wire    grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_v_strm_write;
wire   [0:0] grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_p_strm_din;
wire    grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_p_strm_write;
reg    grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    e_strm_read_local;
reg    ap_block_state4;
reg    e_v_strm_write_local;
reg    e_p_strm_write_local;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_start_reg = 1'b0;
end

filter_dut_broadcast_Pipeline_VITIS_LOOP_88_1 grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_start),
    .ap_done(grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_done),
    .ap_idle(grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_idle),
    .ap_ready(grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_ready),
    .e_strm_dout(e_strm_dout),
    .e_strm_empty_n(e_strm_empty_n),
    .e_strm_read(grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_strm_read),
    .e_v_strm_din(grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_v_strm_din),
    .e_v_strm_num_data_valid(4'd0),
    .e_v_strm_fifo_cap(4'd0),
    .e_v_strm_full_n(e_v_strm_full_n),
    .e_v_strm_write(grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_v_strm_write),
    .e_p_strm_din(grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_p_strm_din),
    .e_p_strm_num_data_valid(6'd0),
    .e_p_strm_fifo_cap(6'd0),
    .e_p_strm_full_n(e_p_strm_full_n),
    .e_p_strm_write(grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_p_strm_write),
    .e(e_reg_59)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_start_reg <= 1'b1;
        end else if ((grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_ready == 1'b1)) begin
            grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_reg_59 <= e_strm_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        e_p_strm_blk_n = e_p_strm_full_n;
    end else begin
        e_p_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_p_strm_din = grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_p_strm_din;
    end else begin
        e_p_strm_din = 1'd1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_p_strm_write = grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_p_strm_write;
    end else begin
        e_p_strm_write = e_p_strm_write_local;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        e_p_strm_write_local = 1'b1;
    end else begin
        e_p_strm_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_strm_blk_n = e_strm_empty_n;
    end else begin
        e_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_strm_read = grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_strm_read;
    end else begin
        e_strm_read = e_strm_read_local;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_strm_read_local = 1'b1;
    end else begin
        e_strm_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        e_v_strm_blk_n = e_v_strm_full_n;
    end else begin
        e_v_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_v_strm_din = grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_v_strm_din;
    end else begin
        e_v_strm_din = 1'd1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_v_strm_write = grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_e_v_strm_write;
    end else begin
        e_v_strm_write = e_v_strm_write_local;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        e_v_strm_write_local = 1'b1;
    end else begin
        e_v_strm_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((e_strm_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((e_p_strm_full_n == 1'b0) | (e_v_strm_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_start = grp_broadcast_Pipeline_VITIS_LOOP_88_1_fu_48_ap_start_reg;

assign start_out = real_start;

endmodule //filter_dut_broadcast
