// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_dut_pred_pass_32_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_strm_dout,
        p_strm_empty_n,
        p_strm_read,
        e_p_strm_dout,
        e_p_strm_num_data_valid,
        e_p_strm_fifo_cap,
        e_p_strm_empty_n,
        e_p_strm_read,
        b_strm_dout,
        b_strm_num_data_valid,
        b_strm_fifo_cap,
        b_strm_empty_n,
        b_strm_read,
        e_b_strm_dout,
        e_b_strm_num_data_valid,
        e_b_strm_fifo_cap,
        e_b_strm_empty_n,
        e_b_strm_read,
        f_strm_din,
        f_strm_full_n,
        f_strm_write,
        e_f_strm_din,
        e_f_strm_full_n,
        e_f_strm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_strm_dout;
input   p_strm_empty_n;
output   p_strm_read;
input  [0:0] e_p_strm_dout;
input  [5:0] e_p_strm_num_data_valid;
input  [5:0] e_p_strm_fifo_cap;
input   e_p_strm_empty_n;
output   e_p_strm_read;
input  [0:0] b_strm_dout;
input  [3:0] b_strm_num_data_valid;
input  [3:0] b_strm_fifo_cap;
input   b_strm_empty_n;
output   b_strm_read;
input  [0:0] e_b_strm_dout;
input  [3:0] e_b_strm_num_data_valid;
input  [3:0] e_b_strm_fifo_cap;
input   e_b_strm_empty_n;
output   e_b_strm_read;
output  [31:0] f_strm_din;
input   f_strm_full_n;
output   f_strm_write;
output  [0:0] e_f_strm_din;
input   e_f_strm_full_n;
output   e_f_strm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_strm_read;
reg e_p_strm_read;
reg b_strm_read;
reg e_b_strm_read;
reg f_strm_write;
reg[0:0] e_f_strm_din;
reg e_f_strm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    e_p_strm_blk_n;
reg    e_b_strm_blk_n;
reg    e_f_strm_blk_n;
wire    ap_CS_fsm_state4;
reg   [0:0] ep_reg_70;
reg    ap_block_state1;
reg   [0:0] eb_reg_75;
wire    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start;
wire    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_done;
wire    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_idle;
wire    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_ready;
wire    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_p_strm_read;
wire    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_b_strm_read;
wire    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_p_strm_read;
wire    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_b_strm_read;
wire   [31:0] grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_din;
wire    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_write;
wire   [0:0] grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_din;
wire    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_write;
reg    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    e_p_strm_read_local;
reg    e_b_strm_read_local;
reg    e_f_strm_write_local;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg = 1'b0;
end

filter_dut_pred_pass_32_Pipeline_FILTER_PRED_PASS grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start),
    .ap_done(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_done),
    .ap_idle(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_idle),
    .ap_ready(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_ready),
    .e_p_strm_dout(e_p_strm_dout),
    .e_p_strm_num_data_valid(6'd0),
    .e_p_strm_fifo_cap(6'd0),
    .e_p_strm_empty_n(e_p_strm_empty_n),
    .e_p_strm_read(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_p_strm_read),
    .e_b_strm_dout(e_b_strm_dout),
    .e_b_strm_num_data_valid(4'd0),
    .e_b_strm_fifo_cap(4'd0),
    .e_b_strm_empty_n(e_b_strm_empty_n),
    .e_b_strm_read(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_b_strm_read),
    .p_strm_dout(p_strm_dout),
    .p_strm_empty_n(p_strm_empty_n),
    .p_strm_read(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_p_strm_read),
    .b_strm_dout(b_strm_dout),
    .b_strm_num_data_valid(4'd0),
    .b_strm_fifo_cap(4'd0),
    .b_strm_empty_n(b_strm_empty_n),
    .b_strm_read(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_b_strm_read),
    .f_strm_din(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_din),
    .f_strm_full_n(f_strm_full_n),
    .f_strm_write(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_write),
    .e_f_strm_din(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_din),
    .e_f_strm_full_n(e_f_strm_full_n),
    .e_f_strm_write(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_write),
    .ep(ep_reg_70),
    .eb(eb_reg_75)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((e_f_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg <= 1'b1;
        end else if ((grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_ready == 1'b1)) begin
            grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        eb_reg_75 <= e_b_strm_dout;
        ep_reg_70 <= e_p_strm_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((e_f_strm_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((e_f_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((e_f_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_strm_read = grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_b_strm_read;
    end else begin
        b_strm_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_b_strm_blk_n = e_b_strm_empty_n;
    end else begin
        e_b_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_b_strm_read = grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_b_strm_read;
    end else begin
        e_b_strm_read = e_b_strm_read_local;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_b_strm_read_local = 1'b1;
    end else begin
        e_b_strm_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        e_f_strm_blk_n = e_f_strm_full_n;
    end else begin
        e_f_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_f_strm_din = grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_din;
    end else begin
        e_f_strm_din = 1'd1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_f_strm_write = grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_write;
    end else begin
        e_f_strm_write = e_f_strm_write_local;
    end
end

always @ (*) begin
    if (((e_f_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        e_f_strm_write_local = 1'b1;
    end else begin
        e_f_strm_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_p_strm_blk_n = e_p_strm_empty_n;
    end else begin
        e_p_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_p_strm_read = grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_p_strm_read;
    end else begin
        e_p_strm_read = e_p_strm_read_local;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        e_p_strm_read_local = 1'b1;
    end else begin
        e_p_strm_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        f_strm_write = grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_write;
    end else begin
        f_strm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_strm_read = grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_p_strm_read;
    end else begin
        p_strm_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((e_f_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (e_b_strm_empty_n == 1'b0) | (e_p_strm_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign f_strm_din = grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_din;

assign grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start = grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg;

endmodule //filter_dut_pred_pass_32_s
