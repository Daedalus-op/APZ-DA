// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_dut_compare_ops_32_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cmpvc_cfg_strms_0_dout,
        cmpvc_cfg_strms_0_num_data_valid,
        cmpvc_cfg_strms_0_fifo_cap,
        cmpvc_cfg_strms_0_empty_n,
        cmpvc_cfg_strms_0_read,
        cmpvc_cfg_strms_1_dout,
        cmpvc_cfg_strms_1_num_data_valid,
        cmpvc_cfg_strms_1_fifo_cap,
        cmpvc_cfg_strms_1_empty_n,
        cmpvc_cfg_strms_1_read,
        cmpvc_cfg_strms_2_dout,
        cmpvc_cfg_strms_2_num_data_valid,
        cmpvc_cfg_strms_2_fifo_cap,
        cmpvc_cfg_strms_2_empty_n,
        cmpvc_cfg_strms_2_read,
        cmpvc_cfg_strms_3_dout,
        cmpvc_cfg_strms_3_num_data_valid,
        cmpvc_cfg_strms_3_fifo_cap,
        cmpvc_cfg_strms_3_empty_n,
        cmpvc_cfg_strms_3_read,
        cmpvv_cfg_strms_0_dout,
        cmpvv_cfg_strms_0_num_data_valid,
        cmpvv_cfg_strms_0_fifo_cap,
        cmpvv_cfg_strms_0_empty_n,
        cmpvv_cfg_strms_0_read,
        cmpvv_cfg_strms_1_dout,
        cmpvv_cfg_strms_1_num_data_valid,
        cmpvv_cfg_strms_1_fifo_cap,
        cmpvv_cfg_strms_1_empty_n,
        cmpvv_cfg_strms_1_read,
        cmpvv_cfg_strms_2_dout,
        cmpvv_cfg_strms_2_num_data_valid,
        cmpvv_cfg_strms_2_fifo_cap,
        cmpvv_cfg_strms_2_empty_n,
        cmpvv_cfg_strms_2_read,
        cmpvv_cfg_strms_3_dout,
        cmpvv_cfg_strms_3_num_data_valid,
        cmpvv_cfg_strms_3_fifo_cap,
        cmpvv_cfg_strms_3_empty_n,
        cmpvv_cfg_strms_3_read,
        cmpvv_cfg_strms_4_dout,
        cmpvv_cfg_strms_4_num_data_valid,
        cmpvv_cfg_strms_4_fifo_cap,
        cmpvv_cfg_strms_4_empty_n,
        cmpvv_cfg_strms_4_read,
        cmpvv_cfg_strms_5_dout,
        cmpvv_cfg_strms_5_num_data_valid,
        cmpvv_cfg_strms_5_fifo_cap,
        cmpvv_cfg_strms_5_empty_n,
        cmpvv_cfg_strms_5_read,
        k_strms_0_dout,
        k_strms_0_empty_n,
        k_strms_0_read,
        k_strms_1_dout,
        k_strms_1_empty_n,
        k_strms_1_read,
        k_strms_2_dout,
        k_strms_2_empty_n,
        k_strms_2_read,
        k_strms_3_dout,
        k_strms_3_empty_n,
        k_strms_3_read,
        e_v_strm_dout,
        e_v_strm_num_data_valid,
        e_v_strm_fifo_cap,
        e_v_strm_empty_n,
        e_v_strm_read,
        addr_strm_din,
        addr_strm_num_data_valid,
        addr_strm_fifo_cap,
        addr_strm_full_n,
        addr_strm_write,
        e_addr_strm_din,
        e_addr_strm_num_data_valid,
        e_addr_strm_fifo_cap,
        e_addr_strm_full_n,
        e_addr_strm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [71:0] cmpvc_cfg_strms_0_dout;
input  [2:0] cmpvc_cfg_strms_0_num_data_valid;
input  [2:0] cmpvc_cfg_strms_0_fifo_cap;
input   cmpvc_cfg_strms_0_empty_n;
output   cmpvc_cfg_strms_0_read;
input  [71:0] cmpvc_cfg_strms_1_dout;
input  [2:0] cmpvc_cfg_strms_1_num_data_valid;
input  [2:0] cmpvc_cfg_strms_1_fifo_cap;
input   cmpvc_cfg_strms_1_empty_n;
output   cmpvc_cfg_strms_1_read;
input  [71:0] cmpvc_cfg_strms_2_dout;
input  [2:0] cmpvc_cfg_strms_2_num_data_valid;
input  [2:0] cmpvc_cfg_strms_2_fifo_cap;
input   cmpvc_cfg_strms_2_empty_n;
output   cmpvc_cfg_strms_2_read;
input  [71:0] cmpvc_cfg_strms_3_dout;
input  [2:0] cmpvc_cfg_strms_3_num_data_valid;
input  [2:0] cmpvc_cfg_strms_3_fifo_cap;
input   cmpvc_cfg_strms_3_empty_n;
output   cmpvc_cfg_strms_3_read;
input  [3:0] cmpvv_cfg_strms_0_dout;
input  [2:0] cmpvv_cfg_strms_0_num_data_valid;
input  [2:0] cmpvv_cfg_strms_0_fifo_cap;
input   cmpvv_cfg_strms_0_empty_n;
output   cmpvv_cfg_strms_0_read;
input  [3:0] cmpvv_cfg_strms_1_dout;
input  [2:0] cmpvv_cfg_strms_1_num_data_valid;
input  [2:0] cmpvv_cfg_strms_1_fifo_cap;
input   cmpvv_cfg_strms_1_empty_n;
output   cmpvv_cfg_strms_1_read;
input  [3:0] cmpvv_cfg_strms_2_dout;
input  [2:0] cmpvv_cfg_strms_2_num_data_valid;
input  [2:0] cmpvv_cfg_strms_2_fifo_cap;
input   cmpvv_cfg_strms_2_empty_n;
output   cmpvv_cfg_strms_2_read;
input  [3:0] cmpvv_cfg_strms_3_dout;
input  [2:0] cmpvv_cfg_strms_3_num_data_valid;
input  [2:0] cmpvv_cfg_strms_3_fifo_cap;
input   cmpvv_cfg_strms_3_empty_n;
output   cmpvv_cfg_strms_3_read;
input  [3:0] cmpvv_cfg_strms_4_dout;
input  [2:0] cmpvv_cfg_strms_4_num_data_valid;
input  [2:0] cmpvv_cfg_strms_4_fifo_cap;
input   cmpvv_cfg_strms_4_empty_n;
output   cmpvv_cfg_strms_4_read;
input  [3:0] cmpvv_cfg_strms_5_dout;
input  [2:0] cmpvv_cfg_strms_5_num_data_valid;
input  [2:0] cmpvv_cfg_strms_5_fifo_cap;
input   cmpvv_cfg_strms_5_empty_n;
output   cmpvv_cfg_strms_5_read;
input  [31:0] k_strms_0_dout;
input   k_strms_0_empty_n;
output   k_strms_0_read;
input  [31:0] k_strms_1_dout;
input   k_strms_1_empty_n;
output   k_strms_1_read;
input  [31:0] k_strms_2_dout;
input   k_strms_2_empty_n;
output   k_strms_2_read;
input  [31:0] k_strms_3_dout;
input   k_strms_3_empty_n;
output   k_strms_3_read;
input  [0:0] e_v_strm_dout;
input  [3:0] e_v_strm_num_data_valid;
input  [3:0] e_v_strm_fifo_cap;
input   e_v_strm_empty_n;
output   e_v_strm_read;
output  [9:0] addr_strm_din;
input  [3:0] addr_strm_num_data_valid;
input  [3:0] addr_strm_fifo_cap;
input   addr_strm_full_n;
output   addr_strm_write;
output  [0:0] e_addr_strm_din;
input  [3:0] e_addr_strm_num_data_valid;
input  [3:0] e_addr_strm_fifo_cap;
input   e_addr_strm_full_n;
output   e_addr_strm_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg k_strms_0_read;
reg k_strms_1_read;
reg k_strms_2_read;
reg k_strms_3_read;
reg e_v_strm_read;
reg addr_strm_write;
reg[0:0] e_addr_strm_din;
reg e_addr_strm_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    cmpvc_cfg_strms_0_blk_n;
reg    cmpvc_cfg_strms_1_blk_n;
reg    cmpvc_cfg_strms_2_blk_n;
reg    cmpvc_cfg_strms_3_blk_n;
reg    cmpvv_cfg_strms_0_blk_n;
reg    cmpvv_cfg_strms_1_blk_n;
reg    cmpvv_cfg_strms_2_blk_n;
reg    cmpvv_cfg_strms_3_blk_n;
reg    cmpvv_cfg_strms_4_blk_n;
reg    cmpvv_cfg_strms_5_blk_n;
reg    e_v_strm_blk_n;
reg    e_addr_strm_blk_n;
wire    ap_CS_fsm_state4;
wire   [3:0] trunc_ln232_fu_189_p1;
reg   [3:0] trunc_ln232_reg_325;
reg    ap_block_state1;
reg   [3:0] trunc_ln232_1_reg_330;
reg   [31:0] trunc_ln232_2_reg_335;
reg   [31:0] trunc_ln232_3_reg_340;
wire   [3:0] trunc_ln233_fu_223_p1;
reg   [3:0] trunc_ln233_reg_345;
reg   [3:0] trunc_ln233_1_reg_350;
reg   [31:0] trunc_ln233_2_reg_355;
reg   [31:0] trunc_ln233_3_reg_360;
wire   [3:0] trunc_ln234_fu_257_p1;
reg   [3:0] trunc_ln234_reg_365;
reg   [3:0] trunc_ln234_1_reg_370;
reg   [31:0] trunc_ln234_2_reg_375;
reg   [31:0] trunc_ln234_3_reg_380;
wire   [3:0] trunc_ln235_fu_291_p1;
reg   [3:0] trunc_ln235_reg_385;
reg   [3:0] trunc_ln235_1_reg_390;
reg   [31:0] trunc_ln235_2_reg_395;
reg   [31:0] trunc_ln235_3_reg_400;
reg   [3:0] cmpvv_cfg_strms_0_read_reg_405;
reg   [3:0] cmpvv_cfg_strms_1_read_reg_410;
reg   [3:0] cmpvv_cfg_strms_2_read_reg_415;
reg   [3:0] cmpvv_cfg_strms_3_read_reg_420;
reg   [3:0] cmpvv_cfg_strms_4_read_reg_425;
reg   [3:0] cmpvv_cfg_strms_5_read_reg_430;
reg   [0:0] e_reg_435;
wire    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start;
wire    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_done;
wire    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_idle;
wire    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_ready;
wire    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_v_strm_read;
wire    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_0_read;
wire    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_1_read;
wire    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_2_read;
wire    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_3_read;
wire   [9:0] grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_din;
wire    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_write;
wire   [0:0] grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_din;
wire    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_write;
reg    grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    cmpvc_cfg_strms_0_read_local;
reg    cmpvc_cfg_strms_1_read_local;
reg    cmpvc_cfg_strms_2_read_local;
reg    cmpvc_cfg_strms_3_read_local;
reg    cmpvv_cfg_strms_0_read_local;
reg    cmpvv_cfg_strms_1_read_local;
reg    cmpvv_cfg_strms_2_read_local;
reg    cmpvv_cfg_strms_3_read_local;
reg    cmpvv_cfg_strms_4_read_local;
reg    cmpvv_cfg_strms_5_read_local;
reg    e_v_strm_read_local;
reg    e_addr_strm_write_local;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg = 1'b0;
end

filter_dut_compare_ops_32_Pipeline_FILTER_MAIN_LOOP grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start),
    .ap_done(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_done),
    .ap_idle(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_idle),
    .ap_ready(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_ready),
    .e_v_strm_dout(e_v_strm_dout),
    .e_v_strm_num_data_valid(4'd0),
    .e_v_strm_fifo_cap(4'd0),
    .e_v_strm_empty_n(e_v_strm_empty_n),
    .e_v_strm_read(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_v_strm_read),
    .k_strms_0_dout(k_strms_0_dout),
    .k_strms_0_empty_n(k_strms_0_empty_n),
    .k_strms_0_read(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_0_read),
    .k_strms_1_dout(k_strms_1_dout),
    .k_strms_1_empty_n(k_strms_1_empty_n),
    .k_strms_1_read(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_1_read),
    .k_strms_2_dout(k_strms_2_dout),
    .k_strms_2_empty_n(k_strms_2_empty_n),
    .k_strms_2_read(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_2_read),
    .k_strms_3_dout(k_strms_3_dout),
    .k_strms_3_empty_n(k_strms_3_empty_n),
    .k_strms_3_read(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_3_read),
    .addr_strm_din(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_din),
    .addr_strm_num_data_valid(4'd0),
    .addr_strm_fifo_cap(4'd0),
    .addr_strm_full_n(addr_strm_full_n),
    .addr_strm_write(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_write),
    .e_addr_strm_din(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_din),
    .e_addr_strm_num_data_valid(4'd0),
    .e_addr_strm_fifo_cap(4'd0),
    .e_addr_strm_full_n(e_addr_strm_full_n),
    .e_addr_strm_write(grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_write),
    .e(e_reg_435),
    .empty_18(trunc_ln232_reg_325),
    .trunc_ln232_1(trunc_ln232_1_reg_330),
    .trunc_ln232_2(trunc_ln232_2_reg_335),
    .trunc_ln232_3(trunc_ln232_3_reg_340),
    .empty_19(trunc_ln233_reg_345),
    .trunc_ln233_1(trunc_ln233_1_reg_350),
    .trunc_ln233_2(trunc_ln233_2_reg_355),
    .trunc_ln233_3(trunc_ln233_3_reg_360),
    .empty_20(trunc_ln234_reg_365),
    .trunc_ln234_1(trunc_ln234_1_reg_370),
    .trunc_ln234_2(trunc_ln234_2_reg_375),
    .trunc_ln234_3(trunc_ln234_3_reg_380),
    .empty_21(trunc_ln235_reg_385),
    .trunc_ln235_1(trunc_ln235_1_reg_390),
    .trunc_ln235_2(trunc_ln235_2_reg_395),
    .trunc_ln235_3(trunc_ln235_3_reg_400),
    .empty_22(cmpvv_cfg_strms_0_read_reg_405),
    .empty_23(cmpvv_cfg_strms_1_read_reg_410),
    .empty_24(cmpvv_cfg_strms_2_read_reg_415),
    .empty_25(cmpvv_cfg_strms_3_read_reg_420),
    .empty_26(cmpvv_cfg_strms_4_read_reg_425),
    .empty(cmpvv_cfg_strms_5_read_reg_430)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (e_addr_strm_full_n == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg <= 1'b1;
        end else if ((grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_ready == 1'b1)) begin
            grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        cmpvv_cfg_strms_0_read_reg_405 <= cmpvv_cfg_strms_0_dout;
        cmpvv_cfg_strms_1_read_reg_410 <= cmpvv_cfg_strms_1_dout;
        cmpvv_cfg_strms_2_read_reg_415 <= cmpvv_cfg_strms_2_dout;
        cmpvv_cfg_strms_3_read_reg_420 <= cmpvv_cfg_strms_3_dout;
        cmpvv_cfg_strms_4_read_reg_425 <= cmpvv_cfg_strms_4_dout;
        cmpvv_cfg_strms_5_read_reg_430 <= cmpvv_cfg_strms_5_dout;
        e_reg_435 <= e_v_strm_dout;
        trunc_ln232_1_reg_330 <= {{cmpvc_cfg_strms_0_dout[7:4]}};
        trunc_ln232_2_reg_335 <= {{cmpvc_cfg_strms_0_dout[39:8]}};
        trunc_ln232_3_reg_340 <= {{cmpvc_cfg_strms_0_dout[71:40]}};
        trunc_ln232_reg_325 <= trunc_ln232_fu_189_p1;
        trunc_ln233_1_reg_350 <= {{cmpvc_cfg_strms_1_dout[7:4]}};
        trunc_ln233_2_reg_355 <= {{cmpvc_cfg_strms_1_dout[39:8]}};
        trunc_ln233_3_reg_360 <= {{cmpvc_cfg_strms_1_dout[71:40]}};
        trunc_ln233_reg_345 <= trunc_ln233_fu_223_p1;
        trunc_ln234_1_reg_370 <= {{cmpvc_cfg_strms_2_dout[7:4]}};
        trunc_ln234_2_reg_375 <= {{cmpvc_cfg_strms_2_dout[39:8]}};
        trunc_ln234_3_reg_380 <= {{cmpvc_cfg_strms_2_dout[71:40]}};
        trunc_ln234_reg_365 <= trunc_ln234_fu_257_p1;
        trunc_ln235_1_reg_390 <= {{cmpvc_cfg_strms_3_dout[7:4]}};
        trunc_ln235_2_reg_395 <= {{cmpvc_cfg_strms_3_dout[39:8]}};
        trunc_ln235_3_reg_400 <= {{cmpvc_cfg_strms_3_dout[71:40]}};
        trunc_ln235_reg_385 <= trunc_ln235_fu_291_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        addr_strm_write = grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_write;
    end else begin
        addr_strm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((e_addr_strm_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (e_addr_strm_full_n == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (e_addr_strm_full_n == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpvc_cfg_strms_0_blk_n = cmpvc_cfg_strms_0_empty_n;
    end else begin
        cmpvc_cfg_strms_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        cmpvc_cfg_strms_0_read_local = 1'b1;
    end else begin
        cmpvc_cfg_strms_0_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpvc_cfg_strms_1_blk_n = cmpvc_cfg_strms_1_empty_n;
    end else begin
        cmpvc_cfg_strms_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        cmpvc_cfg_strms_1_read_local = 1'b1;
    end else begin
        cmpvc_cfg_strms_1_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpvc_cfg_strms_2_blk_n = cmpvc_cfg_strms_2_empty_n;
    end else begin
        cmpvc_cfg_strms_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        cmpvc_cfg_strms_2_read_local = 1'b1;
    end else begin
        cmpvc_cfg_strms_2_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpvc_cfg_strms_3_blk_n = cmpvc_cfg_strms_3_empty_n;
    end else begin
        cmpvc_cfg_strms_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        cmpvc_cfg_strms_3_read_local = 1'b1;
    end else begin
        cmpvc_cfg_strms_3_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpvv_cfg_strms_0_blk_n = cmpvv_cfg_strms_0_empty_n;
    end else begin
        cmpvv_cfg_strms_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        cmpvv_cfg_strms_0_read_local = 1'b1;
    end else begin
        cmpvv_cfg_strms_0_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpvv_cfg_strms_1_blk_n = cmpvv_cfg_strms_1_empty_n;
    end else begin
        cmpvv_cfg_strms_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        cmpvv_cfg_strms_1_read_local = 1'b1;
    end else begin
        cmpvv_cfg_strms_1_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpvv_cfg_strms_2_blk_n = cmpvv_cfg_strms_2_empty_n;
    end else begin
        cmpvv_cfg_strms_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        cmpvv_cfg_strms_2_read_local = 1'b1;
    end else begin
        cmpvv_cfg_strms_2_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpvv_cfg_strms_3_blk_n = cmpvv_cfg_strms_3_empty_n;
    end else begin
        cmpvv_cfg_strms_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        cmpvv_cfg_strms_3_read_local = 1'b1;
    end else begin
        cmpvv_cfg_strms_3_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpvv_cfg_strms_4_blk_n = cmpvv_cfg_strms_4_empty_n;
    end else begin
        cmpvv_cfg_strms_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        cmpvv_cfg_strms_4_read_local = 1'b1;
    end else begin
        cmpvv_cfg_strms_4_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cmpvv_cfg_strms_5_blk_n = cmpvv_cfg_strms_5_empty_n;
    end else begin
        cmpvv_cfg_strms_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        cmpvv_cfg_strms_5_read_local = 1'b1;
    end else begin
        cmpvv_cfg_strms_5_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        e_addr_strm_blk_n = e_addr_strm_full_n;
    end else begin
        e_addr_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_addr_strm_din = grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_din;
    end else begin
        e_addr_strm_din = 1'd1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_addr_strm_write = grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_addr_strm_write;
    end else begin
        e_addr_strm_write = e_addr_strm_write_local;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (e_addr_strm_full_n == 1'b1))) begin
        e_addr_strm_write_local = 1'b1;
    end else begin
        e_addr_strm_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_v_strm_blk_n = e_v_strm_empty_n;
    end else begin
        e_v_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        e_v_strm_read = grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_e_v_strm_read;
    end else begin
        e_v_strm_read = e_v_strm_read_local;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        e_v_strm_read_local = 1'b1;
    end else begin
        e_v_strm_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_strms_0_read = grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_0_read;
    end else begin
        k_strms_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_strms_1_read = grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_1_read;
    end else begin
        k_strms_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_strms_2_read = grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_2_read;
    end else begin
        k_strms_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_strms_3_read = grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_k_strms_3_read;
    end else begin
        k_strms_3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (e_addr_strm_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr_strm_din = grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_addr_strm_din;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (cmpvv_cfg_strms_5_empty_n == 1'b0) | (cmpvv_cfg_strms_4_empty_n == 1'b0) | (cmpvv_cfg_strms_3_empty_n == 1'b0) | (cmpvv_cfg_strms_2_empty_n == 1'b0) | (cmpvv_cfg_strms_1_empty_n == 1'b0) | (cmpvv_cfg_strms_0_empty_n == 1'b0) | (cmpvc_cfg_strms_3_empty_n == 1'b0) | (cmpvc_cfg_strms_2_empty_n == 1'b0) | (cmpvc_cfg_strms_1_empty_n == 1'b0) | (cmpvc_cfg_strms_0_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (e_v_strm_empty_n == 1'b0));
end

assign cmpvc_cfg_strms_0_read = cmpvc_cfg_strms_0_read_local;

assign cmpvc_cfg_strms_1_read = cmpvc_cfg_strms_1_read_local;

assign cmpvc_cfg_strms_2_read = cmpvc_cfg_strms_2_read_local;

assign cmpvc_cfg_strms_3_read = cmpvc_cfg_strms_3_read_local;

assign cmpvv_cfg_strms_0_read = cmpvv_cfg_strms_0_read_local;

assign cmpvv_cfg_strms_1_read = cmpvv_cfg_strms_1_read_local;

assign cmpvv_cfg_strms_2_read = cmpvv_cfg_strms_2_read_local;

assign cmpvv_cfg_strms_3_read = cmpvv_cfg_strms_3_read_local;

assign cmpvv_cfg_strms_4_read = cmpvv_cfg_strms_4_read_local;

assign cmpvv_cfg_strms_5_read = cmpvv_cfg_strms_5_read_local;

assign grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start = grp_compare_ops_32_Pipeline_FILTER_MAIN_LOOP_fu_148_ap_start_reg;

assign trunc_ln232_fu_189_p1 = cmpvc_cfg_strms_0_dout[3:0];

assign trunc_ln233_fu_223_p1 = cmpvc_cfg_strms_1_dout[3:0];

assign trunc_ln234_fu_257_p1 = cmpvc_cfg_strms_2_dout[3:0];

assign trunc_ln235_fu_291_p1 = cmpvc_cfg_strms_3_dout[3:0];

endmodule //filter_dut_compare_ops_32_s
