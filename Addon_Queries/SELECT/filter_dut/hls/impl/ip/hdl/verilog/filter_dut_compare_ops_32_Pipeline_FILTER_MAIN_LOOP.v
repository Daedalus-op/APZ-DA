// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_dut_compare_ops_32_Pipeline_FILTER_MAIN_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        e_v_strm_dout,
        e_v_strm_num_data_valid,
        e_v_strm_fifo_cap,
        e_v_strm_empty_n,
        e_v_strm_read,
        k_strms_0_dout,
        k_strms_0_empty_n,
        k_strms_0_read,
        k_strms_1_dout,
        k_strms_1_empty_n,
        k_strms_1_read,
        k_strms_2_dout,
        k_strms_2_empty_n,
        k_strms_2_read,
        k_strms_3_dout,
        k_strms_3_empty_n,
        k_strms_3_read,
        addr_strm_din,
        addr_strm_num_data_valid,
        addr_strm_fifo_cap,
        addr_strm_full_n,
        addr_strm_write,
        e_addr_strm_din,
        e_addr_strm_num_data_valid,
        e_addr_strm_fifo_cap,
        e_addr_strm_full_n,
        e_addr_strm_write,
        e,
        empty_18,
        trunc_ln232_1,
        trunc_ln232_2,
        trunc_ln232_3,
        empty_19,
        trunc_ln233_1,
        trunc_ln233_2,
        trunc_ln233_3,
        empty_20,
        trunc_ln234_1,
        trunc_ln234_2,
        trunc_ln234_3,
        empty_21,
        trunc_ln235_1,
        trunc_ln235_2,
        trunc_ln235_3,
        empty_22,
        empty_23,
        empty_24,
        empty_25,
        empty_26,
        empty
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] e_v_strm_dout;
input  [3:0] e_v_strm_num_data_valid;
input  [3:0] e_v_strm_fifo_cap;
input   e_v_strm_empty_n;
output   e_v_strm_read;
input  [31:0] k_strms_0_dout;
input   k_strms_0_empty_n;
output   k_strms_0_read;
input  [31:0] k_strms_1_dout;
input   k_strms_1_empty_n;
output   k_strms_1_read;
input  [31:0] k_strms_2_dout;
input   k_strms_2_empty_n;
output   k_strms_2_read;
input  [31:0] k_strms_3_dout;
input   k_strms_3_empty_n;
output   k_strms_3_read;
output  [9:0] addr_strm_din;
input  [3:0] addr_strm_num_data_valid;
input  [3:0] addr_strm_fifo_cap;
input   addr_strm_full_n;
output   addr_strm_write;
output  [0:0] e_addr_strm_din;
input  [3:0] e_addr_strm_num_data_valid;
input  [3:0] e_addr_strm_fifo_cap;
input   e_addr_strm_full_n;
output   e_addr_strm_write;
input  [0:0] e;
input  [3:0] empty_18;
input  [3:0] trunc_ln232_1;
input  [31:0] trunc_ln232_2;
input  [31:0] trunc_ln232_3;
input  [3:0] empty_19;
input  [3:0] trunc_ln233_1;
input  [31:0] trunc_ln233_2;
input  [31:0] trunc_ln233_3;
input  [3:0] empty_20;
input  [3:0] trunc_ln234_1;
input  [31:0] trunc_ln234_2;
input  [31:0] trunc_ln234_3;
input  [3:0] empty_21;
input  [3:0] trunc_ln235_1;
input  [31:0] trunc_ln235_2;
input  [31:0] trunc_ln235_3;
input  [3:0] empty_22;
input  [3:0] empty_23;
input  [3:0] empty_24;
input  [3:0] empty_25;
input  [3:0] empty_26;
input  [3:0] empty;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg   [0:0] ap_phi_mux_e_3_phi_fu_286_p4;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] e_3_reg_283;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    e_v_strm_blk_n;
wire    ap_block_pp0_stage0;
reg    k_strms_0_blk_n;
reg    k_strms_1_blk_n;
reg    k_strms_2_blk_n;
reg    k_strms_3_blk_n;
reg    addr_strm_blk_n;
reg    e_addr_strm_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] e_4_reg_523;
wire    bv0c_var_const_cmp_32_s_fu_294_ap_ready;
wire   [0:0] bv0c_var_const_cmp_32_s_fu_294_ap_return;
wire    bv1c_var_const_cmp_32_s_fu_304_ap_ready;
wire   [0:0] bv1c_var_const_cmp_32_s_fu_304_ap_return;
wire    bv2c_var_const_cmp_32_s_fu_314_ap_ready;
wire   [0:0] bv2c_var_const_cmp_32_s_fu_314_ap_return;
wire    bv3c_var_const_cmp_32_s_fu_324_ap_ready;
wire   [0:0] bv3c_var_const_cmp_32_s_fu_324_ap_return;
wire    bv0v1_var_var_cmp_32_s_fu_334_ap_ready;
wire   [0:0] bv0v1_var_var_cmp_32_s_fu_334_ap_return;
wire    bv0v2_var_var_cmp_32_s_fu_343_ap_ready;
wire   [0:0] bv0v2_var_var_cmp_32_s_fu_343_ap_return;
wire    bv0v3_var_var_cmp_32_s_fu_352_ap_ready;
wire   [0:0] bv0v3_var_var_cmp_32_s_fu_352_ap_return;
wire    bv1v2_var_var_cmp_32_s_fu_361_ap_ready;
wire   [0:0] bv1v2_var_var_cmp_32_s_fu_361_ap_return;
wire    bv1v3_var_var_cmp_32_s_fu_370_ap_ready;
wire   [0:0] bv1v3_var_var_cmp_32_s_fu_370_ap_return;
wire    bv2v3_var_var_cmp_32_s_fu_379_ap_ready;
wire   [0:0] bv2v3_var_var_cmp_32_s_fu_379_ap_return;
wire    ap_loop_init;
wire    ap_block_pp0_stage0_ignoreCallOp45;
wire    ap_block_pp0_stage0_ignoreCallOp46;
wire    ap_block_pp0_stage0_ignoreCallOp47;
wire    ap_block_pp0_stage0_ignoreCallOp48;
wire    ap_block_pp0_stage0_ignoreCallOp49;
wire    ap_block_pp0_stage0_ignoreCallOp50;
wire    ap_block_pp0_stage0_ignoreCallOp51;
wire    ap_block_pp0_stage0_ignoreCallOp52;
wire    ap_block_pp0_stage0_ignoreCallOp53;
wire    ap_block_pp0_stage0_ignoreCallOp54;
reg    e_v_strm_read_local;
reg    k_strms_0_read_local;
reg    k_strms_1_read_local;
reg    k_strms_2_read_local;
reg    k_strms_3_read_local;
wire   [9:0] bvec_fu_388_p11;
reg    ap_block_pp0_stage0_01001;
reg    addr_strm_write_local;
reg    e_addr_strm_write_local;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_412;
reg    ap_condition_416;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

filter_dut_var_const_cmp_32_s bv0c_var_const_cmp_32_s_fu_294(
    .ap_ready(bv0c_var_const_cmp_32_s_fu_294_ap_ready),
    .cfg_lop(empty_18),
    .cfg_rop(trunc_ln232_1),
    .cfg_l(trunc_ln232_2),
    .cfg_r(trunc_ln232_3),
    .xu(k_strms_0_dout),
    .ap_return(bv0c_var_const_cmp_32_s_fu_294_ap_return),
    .ap_rst(ap_rst)
);

filter_dut_var_const_cmp_32_s bv1c_var_const_cmp_32_s_fu_304(
    .ap_ready(bv1c_var_const_cmp_32_s_fu_304_ap_ready),
    .cfg_lop(empty_19),
    .cfg_rop(trunc_ln233_1),
    .cfg_l(trunc_ln233_2),
    .cfg_r(trunc_ln233_3),
    .xu(k_strms_1_dout),
    .ap_return(bv1c_var_const_cmp_32_s_fu_304_ap_return),
    .ap_rst(ap_rst)
);

filter_dut_var_const_cmp_32_s bv2c_var_const_cmp_32_s_fu_314(
    .ap_ready(bv2c_var_const_cmp_32_s_fu_314_ap_ready),
    .cfg_lop(empty_20),
    .cfg_rop(trunc_ln234_1),
    .cfg_l(trunc_ln234_2),
    .cfg_r(trunc_ln234_3),
    .xu(k_strms_2_dout),
    .ap_return(bv2c_var_const_cmp_32_s_fu_314_ap_return),
    .ap_rst(ap_rst)
);

filter_dut_var_const_cmp_32_s bv3c_var_const_cmp_32_s_fu_324(
    .ap_ready(bv3c_var_const_cmp_32_s_fu_324_ap_ready),
    .cfg_lop(empty_21),
    .cfg_rop(trunc_ln235_1),
    .cfg_l(trunc_ln235_2),
    .cfg_r(trunc_ln235_3),
    .xu(k_strms_3_dout),
    .ap_return(bv3c_var_const_cmp_32_s_fu_324_ap_return),
    .ap_rst(ap_rst)
);

filter_dut_var_var_cmp_32_s bv0v1_var_var_cmp_32_s_fu_334(
    .ap_ready(bv0v1_var_var_cmp_32_s_fu_334_ap_ready),
    .cfg(empty_22),
    .xu(k_strms_0_dout),
    .yu(k_strms_1_dout),
    .ap_return(bv0v1_var_var_cmp_32_s_fu_334_ap_return),
    .ap_rst(ap_rst)
);

filter_dut_var_var_cmp_32_s bv0v2_var_var_cmp_32_s_fu_343(
    .ap_ready(bv0v2_var_var_cmp_32_s_fu_343_ap_ready),
    .cfg(empty_23),
    .xu(k_strms_0_dout),
    .yu(k_strms_2_dout),
    .ap_return(bv0v2_var_var_cmp_32_s_fu_343_ap_return),
    .ap_rst(ap_rst)
);

filter_dut_var_var_cmp_32_s bv0v3_var_var_cmp_32_s_fu_352(
    .ap_ready(bv0v3_var_var_cmp_32_s_fu_352_ap_ready),
    .cfg(empty_24),
    .xu(k_strms_0_dout),
    .yu(k_strms_3_dout),
    .ap_return(bv0v3_var_var_cmp_32_s_fu_352_ap_return),
    .ap_rst(ap_rst)
);

filter_dut_var_var_cmp_32_s bv1v2_var_var_cmp_32_s_fu_361(
    .ap_ready(bv1v2_var_var_cmp_32_s_fu_361_ap_ready),
    .cfg(empty_25),
    .xu(k_strms_1_dout),
    .yu(k_strms_2_dout),
    .ap_return(bv1v2_var_var_cmp_32_s_fu_361_ap_return),
    .ap_rst(ap_rst)
);

filter_dut_var_var_cmp_32_s bv1v3_var_var_cmp_32_s_fu_370(
    .ap_ready(bv1v3_var_var_cmp_32_s_fu_370_ap_ready),
    .cfg(empty_26),
    .xu(k_strms_1_dout),
    .yu(k_strms_3_dout),
    .ap_return(bv1v3_var_var_cmp_32_s_fu_370_ap_return),
    .ap_rst(ap_rst)
);

filter_dut_var_var_cmp_32_s bv2v3_var_var_cmp_32_s_fu_379(
    .ap_ready(bv2v3_var_var_cmp_32_s_fu_379_ap_ready),
    .cfg(empty),
    .xu(k_strms_2_dout),
    .yu(k_strms_3_dout),
    .ap_return(bv2v3_var_var_cmp_32_s_fu_379_ap_return),
    .ap_rst(ap_rst)
);

filter_dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_416)) begin
            e_3_reg_283 <= e_4_reg_523;
        end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            e_3_reg_283 <= e;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        e_4_reg_523 <= e_v_strm_dout;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        addr_strm_blk_n = addr_strm_full_n;
    end else begin
        addr_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        addr_strm_write_local = 1'b1;
    end else begin
        addr_strm_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_e_3_phi_fu_286_p4 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_412)) begin
            ap_phi_mux_e_3_phi_fu_286_p4 = e_4_reg_523;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_e_3_phi_fu_286_p4 = e;
        end else begin
            ap_phi_mux_e_3_phi_fu_286_p4 = e_3_reg_283;
        end
    end else begin
        ap_phi_mux_e_3_phi_fu_286_p4 = e_3_reg_283;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        e_addr_strm_blk_n = e_addr_strm_full_n;
    end else begin
        e_addr_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        e_addr_strm_write_local = 1'b1;
    end else begin
        e_addr_strm_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_e_3_phi_fu_286_p4 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        e_v_strm_blk_n = e_v_strm_empty_n;
    end else begin
        e_v_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_phi_mux_e_3_phi_fu_286_p4 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        e_v_strm_read_local = 1'b1;
    end else begin
        e_v_strm_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        k_strms_0_blk_n = k_strms_0_empty_n;
    end else begin
        k_strms_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_strms_0_read_local = 1'b1;
    end else begin
        k_strms_0_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        k_strms_1_blk_n = k_strms_1_empty_n;
    end else begin
        k_strms_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_strms_1_read_local = 1'b1;
    end else begin
        k_strms_1_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        k_strms_2_blk_n = k_strms_2_empty_n;
    end else begin
        k_strms_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_strms_2_read_local = 1'b1;
    end else begin
        k_strms_2_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        k_strms_3_blk_n = k_strms_3_empty_n;
    end else begin
        k_strms_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_strms_3_read_local = 1'b1;
    end else begin
        k_strms_3_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr_strm_din = bvec_fu_388_p11;

assign addr_strm_write = addr_strm_write_local;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage0_ignoreCallOp45 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp46 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp47 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp48 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp49 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp50 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp51 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp52 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp53 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_ignoreCallOp54 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_phi_mux_e_3_phi_fu_286_p4 == 1'd0) & (e_v_strm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((e_addr_strm_full_n == 1'b0) & (e_3_reg_283 == 1'd0)) | ((k_strms_3_empty_n == 1'b0) & (e_3_reg_283 == 1'd0)) | ((k_strms_2_empty_n == 1'b0) & (e_3_reg_283 == 1'd0)) | ((k_strms_1_empty_n == 1'b0) & (e_3_reg_283 == 1'd0)) | ((e_3_reg_283 == 1'd0) & (1'b0 == addr_strm_full_n)) | ((e_3_reg_283 == 1'd0) & (k_strms_0_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_412 = ((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_416 = ((e_3_reg_283 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign bvec_fu_388_p11 = {{{{{{{{{{bv2v3_var_var_cmp_32_s_fu_379_ap_return}, {bv1v3_var_var_cmp_32_s_fu_370_ap_return}}, {bv1v2_var_var_cmp_32_s_fu_361_ap_return}}, {bv0v3_var_var_cmp_32_s_fu_352_ap_return}}, {bv0v2_var_var_cmp_32_s_fu_343_ap_return}}, {bv0v1_var_var_cmp_32_s_fu_334_ap_return}}, {bv3c_var_const_cmp_32_s_fu_324_ap_return}}, {bv2c_var_const_cmp_32_s_fu_314_ap_return}}, {bv1c_var_const_cmp_32_s_fu_304_ap_return}}, {bv0c_var_const_cmp_32_s_fu_294_ap_return}};

assign e_addr_strm_din = 1'd0;

assign e_addr_strm_write = e_addr_strm_write_local;

assign e_v_strm_read = e_v_strm_read_local;

assign k_strms_0_read = k_strms_0_read_local;

assign k_strms_1_read = k_strms_1_read_local;

assign k_strms_2_read = k_strms_2_read_local;

assign k_strms_3_read = k_strms_3_read_local;

endmodule //filter_dut_compare_ops_32_Pipeline_FILTER_MAIN_LOOP
