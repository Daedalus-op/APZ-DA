// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module filter_dut_true_table_4_Pipeline_VITIS_LOOP_318_1_TRUE_TABLE_INIT32 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tt_cfg_strm_dout,
        tt_cfg_strm_num_data_valid,
        tt_cfg_strm_fifo_cap,
        tt_cfg_strm_empty_n,
        tt_cfg_strm_read,
        truetable_address0,
        truetable_ce0,
        truetable_we0,
        truetable_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] tt_cfg_strm_dout;
input  [2:0] tt_cfg_strm_num_data_valid;
input  [2:0] tt_cfg_strm_fifo_cap;
input   tt_cfg_strm_empty_n;
output   tt_cfg_strm_read;
output  [9:0] truetable_address0;
output   truetable_ce0;
output   truetable_we0;
output  [0:0] truetable_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] first_iter_0_reg_265;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln318_fu_101_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    tt_cfg_strm_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln321_fu_116_p2;
reg   [0:0] icmp_ln321_reg_254;
reg   [0:0] icmp_ln321_reg_254_pp0_iter1_reg;
wire   [5:0] select_ln318_fu_122_p3;
reg   [5:0] select_ln318_reg_259;
reg   [5:0] select_ln318_reg_259_pp0_iter1_reg;
wire   [0:0] first_iter_0_fu_130_p2;
wire   [63:0] zext_ln324_1_fu_213_p1;
reg   [5:0] j_fu_48;
wire   [5:0] add_ln321_fu_136_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_52;
wire   [5:0] select_ln318_1_fu_166_p3;
reg   [10:0] indvar_flatten_fu_56;
wire   [10:0] add_ln318_fu_107_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [31:0] p_05_fu_60;
reg    tt_cfg_strm_read_local;
reg    truetable_we0_local;
wire   [0:0] tmp_fu_198_p3;
reg    truetable_ce0_local;
wire   [5:0] add_ln318_1_fu_160_p2;
wire   [4:0] empty_fu_176_p1;
wire   [4:0] trunc_ln324_fu_191_p1;
wire   [31:0] zext_ln324_fu_194_p1;
wire   [9:0] tmp_2_fu_180_p3;
wire   [9:0] zext_ln321_fu_188_p1;
wire   [9:0] add_ln324_fu_207_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_fu_48 = 6'd0;
#0 i_fu_52 = 6'd0;
#0 indvar_flatten_fu_56 = 11'd0;
#0 p_05_fu_60 = 32'd0;
#0 ap_done_reg = 1'b0;
end

filter_dut_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            i_fu_52 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_fu_52 <= select_ln318_1_fu_166_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln318_fu_101_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_56 <= add_ln318_fu_107_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_56 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln318_fu_101_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_48 <= add_ln321_fu_136_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_48 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        first_iter_0_reg_265 <= first_iter_0_fu_130_p2;
        icmp_ln321_reg_254 <= icmp_ln321_fu_116_p2;
        icmp_ln321_reg_254_pp0_iter1_reg <= icmp_ln321_reg_254;
        select_ln318_reg_259 <= select_ln318_fu_122_p3;
        select_ln318_reg_259_pp0_iter1_reg <= select_ln318_reg_259;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (first_iter_0_reg_265 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_05_fu_60 <= tt_cfg_strm_dout;
    end
end

always @ (*) begin
    if (((icmp_ln318_fu_101_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        truetable_ce0_local = 1'b1;
    end else begin
        truetable_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        truetable_we0_local = 1'b1;
    end else begin
        truetable_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (first_iter_0_reg_265 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tt_cfg_strm_blk_n = tt_cfg_strm_empty_n;
    end else begin
        tt_cfg_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (first_iter_0_reg_265 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tt_cfg_strm_read_local = 1'b1;
    end else begin
        tt_cfg_strm_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln318_1_fu_160_p2 = (i_fu_52 + 6'd1);

assign add_ln318_fu_107_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln321_fu_136_p2 = (select_ln318_fu_122_p3 + 6'd1);

assign add_ln324_fu_207_p2 = (tmp_2_fu_180_p3 + zext_ln321_fu_188_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((first_iter_0_reg_265 == 1'd1) & (tt_cfg_strm_empty_n == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_fu_176_p1 = select_ln318_1_fu_166_p3[4:0];

assign first_iter_0_fu_130_p2 = ((select_ln318_fu_122_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln318_fu_101_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln321_fu_116_p2 = ((ap_sig_allocacmp_j_load == 6'd32) ? 1'b1 : 1'b0);

assign select_ln318_1_fu_166_p3 = ((icmp_ln321_reg_254_pp0_iter1_reg[0:0] == 1'b1) ? add_ln318_1_fu_160_p2 : i_fu_52);

assign select_ln318_fu_122_p3 = ((icmp_ln321_fu_116_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_j_load);

assign tmp_2_fu_180_p3 = {{empty_fu_176_p1}, {5'd0}};

assign tmp_fu_198_p3 = p_05_fu_60[zext_ln324_fu_194_p1];

assign truetable_address0 = zext_ln324_1_fu_213_p1;

assign truetable_ce0 = truetable_ce0_local;

assign truetable_d0 = tmp_fu_198_p3;

assign truetable_we0 = truetable_we0_local;

assign trunc_ln324_fu_191_p1 = select_ln318_reg_259_pp0_iter1_reg[4:0];

assign tt_cfg_strm_read = tt_cfg_strm_read_local;

assign zext_ln321_fu_188_p1 = select_ln318_reg_259_pp0_iter1_reg;

assign zext_ln324_1_fu_213_p1 = add_ln324_fu_207_p2;

assign zext_ln324_fu_194_p1 = trunc_ln324_fu_191_p1;

endmodule //filter_dut_true_table_4_Pipeline_VITIS_LOOP_318_1_TRUE_TABLE_INIT32
