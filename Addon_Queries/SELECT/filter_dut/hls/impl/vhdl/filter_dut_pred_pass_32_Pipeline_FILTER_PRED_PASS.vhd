-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_dut_pred_pass_32_Pipeline_FILTER_PRED_PASS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    e_p_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    e_p_strm_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    e_p_strm_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    e_p_strm_empty_n : IN STD_LOGIC;
    e_p_strm_read : OUT STD_LOGIC;
    e_b_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    e_b_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    e_b_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    e_b_strm_empty_n : IN STD_LOGIC;
    e_b_strm_read : OUT STD_LOGIC;
    p_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_strm_empty_n : IN STD_LOGIC;
    p_strm_read : OUT STD_LOGIC;
    b_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    b_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    b_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    b_strm_empty_n : IN STD_LOGIC;
    b_strm_read : OUT STD_LOGIC;
    f_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    f_strm_full_n : IN STD_LOGIC;
    f_strm_write : OUT STD_LOGIC;
    e_f_strm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    e_f_strm_full_n : IN STD_LOGIC;
    e_f_strm_write : OUT STD_LOGIC;
    ep : IN STD_LOGIC_VECTOR (0 downto 0);
    eb : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of filter_dut_pred_pass_32_Pipeline_FILTER_PRED_PASS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln372_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal or_ln372_reg_121 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal b_reg_140 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal e_p_strm_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal e_b_strm_blk_n : STD_LOGIC;
    signal p_strm_blk_n : STD_LOGIC;
    signal b_strm_blk_n : STD_LOGIC;
    signal f_strm_blk_n : STD_LOGIC;
    signal e_f_strm_blk_n : STD_LOGIC;
    signal ep_1_reg_95 : STD_LOGIC_VECTOR (0 downto 0);
    signal eb_1_reg_105 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_strm_read_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ep_1_phi_fu_98_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_mux_eb_1_phi_fu_108_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal e_p_strm_read_local : STD_LOGIC;
    signal e_b_strm_read_local : STD_LOGIC;
    signal p_strm_read_local : STD_LOGIC;
    signal b_strm_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal f_strm_write_local : STD_LOGIC;
    signal e_f_strm_write_local : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component filter_dut_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component filter_dut_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                b_reg_140 <= b_strm_dout;
                or_ln372_reg_121 <= or_ln372_fu_115_p2;
                p_strm_read_reg_135 <= p_strm_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln372_fu_115_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                eb_1_reg_105 <= e_b_strm_dout;
                ep_1_reg_95 <= e_p_strm_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(e_p_strm_empty_n, or_ln372_fu_115_p2, e_b_strm_empty_n)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (((e_b_strm_empty_n = ap_const_logic_0) and (or_ln372_fu_115_p2 = ap_const_lv1_0)) or ((or_ln372_fu_115_p2 = ap_const_lv1_0) and (e_p_strm_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(p_strm_empty_n, or_ln372_reg_121, b_strm_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((b_strm_empty_n = ap_const_logic_0) and (or_ln372_reg_121 = ap_const_lv1_0)) or ((or_ln372_reg_121 = ap_const_lv1_0) and (p_strm_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(f_strm_full_n, b_reg_140, e_f_strm_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((e_f_strm_full_n = ap_const_logic_0) and (b_reg_140 = ap_const_lv1_1)) or ((b_reg_140 = ap_const_lv1_1) and (f_strm_full_n = ap_const_logic_0)));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln372_fu_115_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((or_ln372_fu_115_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_eb_1_phi_fu_108_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, eb, eb_1_reg_105, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_phi_mux_eb_1_phi_fu_108_p4 <= eb;
        else 
            ap_phi_mux_eb_1_phi_fu_108_p4 <= eb_1_reg_105;
        end if; 
    end process;


    ap_phi_mux_ep_1_phi_fu_98_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ep, ep_1_reg_95, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_phi_mux_ep_1_phi_fu_98_p4 <= ep;
        else 
            ap_phi_mux_ep_1_phi_fu_98_p4 <= ep_1_reg_95;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    b_strm_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln372_reg_121, b_strm_empty_n, ap_block_pp0_stage0)
    begin
        if (((or_ln372_reg_121 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            b_strm_blk_n <= b_strm_empty_n;
        else 
            b_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    b_strm_read <= b_strm_read_local;

    b_strm_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln372_reg_121, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln372_reg_121 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_strm_read_local <= ap_const_logic_1;
        else 
            b_strm_read_local <= ap_const_logic_0;
        end if; 
    end process;


    e_b_strm_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln372_fu_115_p2, e_b_strm_empty_n, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((or_ln372_fu_115_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            e_b_strm_blk_n <= e_b_strm_empty_n;
        else 
            e_b_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    e_b_strm_read <= e_b_strm_read_local;

    e_b_strm_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln372_fu_115_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((or_ln372_fu_115_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            e_b_strm_read_local <= ap_const_logic_1;
        else 
            e_b_strm_read_local <= ap_const_logic_0;
        end if; 
    end process;


    e_f_strm_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, b_reg_140, e_f_strm_full_n, ap_block_pp0_stage0)
    begin
        if (((b_reg_140 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            e_f_strm_blk_n <= e_f_strm_full_n;
        else 
            e_f_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    e_f_strm_din <= ap_const_lv1_0;
    e_f_strm_write <= e_f_strm_write_local;

    e_f_strm_write_local_assign_proc : process(ap_enable_reg_pp0_iter2, b_reg_140, ap_block_pp0_stage0_11001)
    begin
        if (((b_reg_140 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            e_f_strm_write_local <= ap_const_logic_1;
        else 
            e_f_strm_write_local <= ap_const_logic_0;
        end if; 
    end process;


    e_p_strm_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, e_p_strm_empty_n, or_ln372_fu_115_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((or_ln372_fu_115_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            e_p_strm_blk_n <= e_p_strm_empty_n;
        else 
            e_p_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    e_p_strm_read <= e_p_strm_read_local;

    e_p_strm_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, or_ln372_fu_115_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((or_ln372_fu_115_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            e_p_strm_read_local <= ap_const_logic_1;
        else 
            e_p_strm_read_local <= ap_const_logic_0;
        end if; 
    end process;


    f_strm_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, f_strm_full_n, b_reg_140, ap_block_pp0_stage0)
    begin
        if (((b_reg_140 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            f_strm_blk_n <= f_strm_full_n;
        else 
            f_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    f_strm_din <= p_strm_read_reg_135;
    f_strm_write <= f_strm_write_local;

    f_strm_write_local_assign_proc : process(ap_enable_reg_pp0_iter2, b_reg_140, ap_block_pp0_stage0_11001)
    begin
        if (((b_reg_140 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            f_strm_write_local <= ap_const_logic_1;
        else 
            f_strm_write_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln372_fu_115_p2 <= (ap_phi_mux_ep_1_phi_fu_98_p4 or ap_phi_mux_eb_1_phi_fu_108_p4);

    p_strm_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, p_strm_empty_n, or_ln372_reg_121, ap_block_pp0_stage0)
    begin
        if (((or_ln372_reg_121 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_strm_blk_n <= p_strm_empty_n;
        else 
            p_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_strm_read <= p_strm_read_local;

    p_strm_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_ln372_reg_121, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln372_reg_121 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_strm_read_local <= ap_const_logic_1;
        else 
            p_strm_read_local <= ap_const_logic_0;
        end if; 
    end process;

end behav;
