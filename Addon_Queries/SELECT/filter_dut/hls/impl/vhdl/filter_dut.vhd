-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    filter_cfg_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    filter_cfg_strm_empty_n : IN STD_LOGIC;
    filter_cfg_strm_read : OUT STD_LOGIC;
    k_strms_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    k_strms_0_empty_n : IN STD_LOGIC;
    k_strms_0_read : OUT STD_LOGIC;
    k_strms_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    k_strms_1_empty_n : IN STD_LOGIC;
    k_strms_1_read : OUT STD_LOGIC;
    k_strms_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    k_strms_2_empty_n : IN STD_LOGIC;
    k_strms_2_read : OUT STD_LOGIC;
    k_strms_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    k_strms_3_empty_n : IN STD_LOGIC;
    k_strms_3_read : OUT STD_LOGIC;
    p_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_strm_empty_n : IN STD_LOGIC;
    p_strm_read : OUT STD_LOGIC;
    e_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    e_strm_empty_n : IN STD_LOGIC;
    e_strm_read : OUT STD_LOGIC;
    f_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    f_strm_full_n : IN STD_LOGIC;
    f_strm_write : OUT STD_LOGIC;
    e_f_strm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    e_f_strm_full_n : IN STD_LOGIC;
    e_f_strm_write : OUT STD_LOGIC );
end;


architecture behav of filter_dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "filter_dut_filter_dut,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.489286,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1851,HLS_SYN_LUT=7954,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_dynamicFilter_32_32_s_fu_36_filter_cfg_strm_read : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_k_strms_0_read : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_k_strms_1_read : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_k_strms_2_read : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_k_strms_3_read : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_p_strm_read : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_e_strm_read : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_f_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dynamicFilter_32_32_s_fu_36_f_strm_write : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_e_f_strm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dynamicFilter_32_32_s_fu_36_e_f_strm_write : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_ap_start : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_ap_done : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_ap_ready : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_ap_idle : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_ap_continue : STD_LOGIC;
    signal grp_dynamicFilter_32_32_s_fu_36_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done : STD_LOGIC := '0';
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_grp_dynamicFilter_32_32_s_fu_36_ap_ready : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component filter_dut_dynamicFilter_32_32_s IS
    port (
        filter_cfg_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        filter_cfg_strm_empty_n : IN STD_LOGIC;
        filter_cfg_strm_read : OUT STD_LOGIC;
        k_strms_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        k_strms_0_empty_n : IN STD_LOGIC;
        k_strms_0_read : OUT STD_LOGIC;
        k_strms_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        k_strms_1_empty_n : IN STD_LOGIC;
        k_strms_1_read : OUT STD_LOGIC;
        k_strms_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        k_strms_2_empty_n : IN STD_LOGIC;
        k_strms_2_read : OUT STD_LOGIC;
        k_strms_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        k_strms_3_empty_n : IN STD_LOGIC;
        k_strms_3_read : OUT STD_LOGIC;
        p_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_strm_empty_n : IN STD_LOGIC;
        p_strm_read : OUT STD_LOGIC;
        e_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        e_strm_empty_n : IN STD_LOGIC;
        e_strm_read : OUT STD_LOGIC;
        f_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        f_strm_full_n : IN STD_LOGIC;
        f_strm_write : OUT STD_LOGIC;
        e_f_strm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        e_f_strm_full_n : IN STD_LOGIC;
        e_f_strm_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_dynamicFilter_32_32_s_fu_36 : component filter_dut_dynamicFilter_32_32_s
    port map (
        filter_cfg_strm_dout => filter_cfg_strm_dout,
        filter_cfg_strm_empty_n => filter_cfg_strm_empty_n,
        filter_cfg_strm_read => grp_dynamicFilter_32_32_s_fu_36_filter_cfg_strm_read,
        k_strms_0_dout => k_strms_0_dout,
        k_strms_0_empty_n => k_strms_0_empty_n,
        k_strms_0_read => grp_dynamicFilter_32_32_s_fu_36_k_strms_0_read,
        k_strms_1_dout => k_strms_1_dout,
        k_strms_1_empty_n => k_strms_1_empty_n,
        k_strms_1_read => grp_dynamicFilter_32_32_s_fu_36_k_strms_1_read,
        k_strms_2_dout => k_strms_2_dout,
        k_strms_2_empty_n => k_strms_2_empty_n,
        k_strms_2_read => grp_dynamicFilter_32_32_s_fu_36_k_strms_2_read,
        k_strms_3_dout => k_strms_3_dout,
        k_strms_3_empty_n => k_strms_3_empty_n,
        k_strms_3_read => grp_dynamicFilter_32_32_s_fu_36_k_strms_3_read,
        p_strm_dout => p_strm_dout,
        p_strm_empty_n => p_strm_empty_n,
        p_strm_read => grp_dynamicFilter_32_32_s_fu_36_p_strm_read,
        e_strm_dout => e_strm_dout,
        e_strm_empty_n => e_strm_empty_n,
        e_strm_read => grp_dynamicFilter_32_32_s_fu_36_e_strm_read,
        f_strm_din => grp_dynamicFilter_32_32_s_fu_36_f_strm_din,
        f_strm_full_n => f_strm_full_n,
        f_strm_write => grp_dynamicFilter_32_32_s_fu_36_f_strm_write,
        e_f_strm_din => grp_dynamicFilter_32_32_s_fu_36_e_f_strm_din,
        e_f_strm_full_n => e_f_strm_full_n,
        e_f_strm_write => grp_dynamicFilter_32_32_s_fu_36_e_f_strm_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dynamicFilter_32_32_s_fu_36_ap_start,
        ap_done => grp_dynamicFilter_32_32_s_fu_36_ap_done,
        ap_ready => grp_dynamicFilter_32_32_s_fu_36_ap_ready,
        ap_idle => grp_dynamicFilter_32_32_s_fu_36_ap_idle,
        ap_continue => grp_dynamicFilter_32_32_s_fu_36_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done <= ap_const_logic_0;
                elsif ((grp_dynamicFilter_32_32_s_fu_36_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready <= ap_const_logic_0;
                elsif ((grp_dynamicFilter_32_32_s_fu_36_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dynamicFilter_32_32_s_fu_36_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dynamicFilter_32_32_s_fu_36_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sync_grp_dynamicFilter_32_32_s_fu_36_ap_ready = ap_const_logic_0)))) then 
                    grp_dynamicFilter_32_32_s_fu_36_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dynamicFilter_32_32_s_fu_36_ap_ready = ap_const_logic_1)) then 
                    grp_dynamicFilter_32_32_s_fu_36_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready, ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready and ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_dynamicFilter_32_32_s_fu_36_ap_ready <= (grp_dynamicFilter_32_32_s_fu_36_ap_ready or ap_sync_reg_grp_dynamicFilter_32_32_s_fu_36_ap_ready);
    e_f_strm_din <= grp_dynamicFilter_32_32_s_fu_36_e_f_strm_din;

    e_f_strm_write_assign_proc : process(grp_dynamicFilter_32_32_s_fu_36_e_f_strm_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            e_f_strm_write <= grp_dynamicFilter_32_32_s_fu_36_e_f_strm_write;
        else 
            e_f_strm_write <= ap_const_logic_0;
        end if; 
    end process;


    e_strm_read_assign_proc : process(grp_dynamicFilter_32_32_s_fu_36_e_strm_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            e_strm_read <= grp_dynamicFilter_32_32_s_fu_36_e_strm_read;
        else 
            e_strm_read <= ap_const_logic_0;
        end if; 
    end process;

    f_strm_din <= grp_dynamicFilter_32_32_s_fu_36_f_strm_din;

    f_strm_write_assign_proc : process(grp_dynamicFilter_32_32_s_fu_36_f_strm_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            f_strm_write <= grp_dynamicFilter_32_32_s_fu_36_f_strm_write;
        else 
            f_strm_write <= ap_const_logic_0;
        end if; 
    end process;


    filter_cfg_strm_read_assign_proc : process(grp_dynamicFilter_32_32_s_fu_36_filter_cfg_strm_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            filter_cfg_strm_read <= grp_dynamicFilter_32_32_s_fu_36_filter_cfg_strm_read;
        else 
            filter_cfg_strm_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_dynamicFilter_32_32_s_fu_36_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            grp_dynamicFilter_32_32_s_fu_36_ap_continue <= ap_const_logic_1;
        else 
            grp_dynamicFilter_32_32_s_fu_36_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dynamicFilter_32_32_s_fu_36_ap_start <= grp_dynamicFilter_32_32_s_fu_36_ap_start_reg;

    k_strms_0_read_assign_proc : process(grp_dynamicFilter_32_32_s_fu_36_k_strms_0_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            k_strms_0_read <= grp_dynamicFilter_32_32_s_fu_36_k_strms_0_read;
        else 
            k_strms_0_read <= ap_const_logic_0;
        end if; 
    end process;


    k_strms_1_read_assign_proc : process(grp_dynamicFilter_32_32_s_fu_36_k_strms_1_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            k_strms_1_read <= grp_dynamicFilter_32_32_s_fu_36_k_strms_1_read;
        else 
            k_strms_1_read <= ap_const_logic_0;
        end if; 
    end process;


    k_strms_2_read_assign_proc : process(grp_dynamicFilter_32_32_s_fu_36_k_strms_2_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            k_strms_2_read <= grp_dynamicFilter_32_32_s_fu_36_k_strms_2_read;
        else 
            k_strms_2_read <= ap_const_logic_0;
        end if; 
    end process;


    k_strms_3_read_assign_proc : process(grp_dynamicFilter_32_32_s_fu_36_k_strms_3_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            k_strms_3_read <= grp_dynamicFilter_32_32_s_fu_36_k_strms_3_read;
        else 
            k_strms_3_read <= ap_const_logic_0;
        end if; 
    end process;


    p_strm_read_assign_proc : process(grp_dynamicFilter_32_32_s_fu_36_p_strm_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_strm_read <= grp_dynamicFilter_32_32_s_fu_36_p_strm_read;
        else 
            p_strm_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
