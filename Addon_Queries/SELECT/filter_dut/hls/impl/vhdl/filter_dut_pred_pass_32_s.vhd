-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity filter_dut_pred_pass_32_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_strm_empty_n : IN STD_LOGIC;
    p_strm_read : OUT STD_LOGIC;
    e_p_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    e_p_strm_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    e_p_strm_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    e_p_strm_empty_n : IN STD_LOGIC;
    e_p_strm_read : OUT STD_LOGIC;
    b_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    b_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    b_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    b_strm_empty_n : IN STD_LOGIC;
    b_strm_read : OUT STD_LOGIC;
    e_b_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    e_b_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    e_b_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    e_b_strm_empty_n : IN STD_LOGIC;
    e_b_strm_read : OUT STD_LOGIC;
    f_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    f_strm_full_n : IN STD_LOGIC;
    f_strm_write : OUT STD_LOGIC;
    e_f_strm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    e_f_strm_full_n : IN STD_LOGIC;
    e_f_strm_write : OUT STD_LOGIC );
end;


architecture behav of filter_dut_pred_pass_32_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal e_p_strm_blk_n : STD_LOGIC;
    signal e_b_strm_blk_n : STD_LOGIC;
    signal e_f_strm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ep_reg_70 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal eb_reg_75 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start : STD_LOGIC;
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_done : STD_LOGIC;
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_idle : STD_LOGIC;
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_ready : STD_LOGIC;
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_p_strm_read : STD_LOGIC;
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_b_strm_read : STD_LOGIC;
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_p_strm_read : STD_LOGIC;
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_b_strm_read : STD_LOGIC;
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_write : STD_LOGIC;
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_write : STD_LOGIC;
    signal grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal e_p_strm_read_local : STD_LOGIC;
    signal e_b_strm_read_local : STD_LOGIC;
    signal e_f_strm_write_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component filter_dut_pred_pass_32_Pipeline_FILTER_PRED_PASS IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        e_p_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        e_p_strm_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        e_p_strm_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        e_p_strm_empty_n : IN STD_LOGIC;
        e_p_strm_read : OUT STD_LOGIC;
        e_b_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        e_b_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        e_b_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        e_b_strm_empty_n : IN STD_LOGIC;
        e_b_strm_read : OUT STD_LOGIC;
        p_strm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        p_strm_empty_n : IN STD_LOGIC;
        p_strm_read : OUT STD_LOGIC;
        b_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        b_strm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        b_strm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        b_strm_empty_n : IN STD_LOGIC;
        b_strm_read : OUT STD_LOGIC;
        f_strm_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        f_strm_full_n : IN STD_LOGIC;
        f_strm_write : OUT STD_LOGIC;
        e_f_strm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        e_f_strm_full_n : IN STD_LOGIC;
        e_f_strm_write : OUT STD_LOGIC;
        ep : IN STD_LOGIC_VECTOR (0 downto 0);
        eb : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52 : component filter_dut_pred_pass_32_Pipeline_FILTER_PRED_PASS
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start,
        ap_done => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_done,
        ap_idle => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_idle,
        ap_ready => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_ready,
        e_p_strm_dout => e_p_strm_dout,
        e_p_strm_num_data_valid => ap_const_lv6_0,
        e_p_strm_fifo_cap => ap_const_lv6_0,
        e_p_strm_empty_n => e_p_strm_empty_n,
        e_p_strm_read => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_p_strm_read,
        e_b_strm_dout => e_b_strm_dout,
        e_b_strm_num_data_valid => ap_const_lv4_0,
        e_b_strm_fifo_cap => ap_const_lv4_0,
        e_b_strm_empty_n => e_b_strm_empty_n,
        e_b_strm_read => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_b_strm_read,
        p_strm_dout => p_strm_dout,
        p_strm_empty_n => p_strm_empty_n,
        p_strm_read => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_p_strm_read,
        b_strm_dout => b_strm_dout,
        b_strm_num_data_valid => ap_const_lv4_0,
        b_strm_fifo_cap => ap_const_lv4_0,
        b_strm_empty_n => b_strm_empty_n,
        b_strm_read => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_b_strm_read,
        f_strm_din => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_din,
        f_strm_full_n => f_strm_full_n,
        f_strm_write => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_write,
        e_f_strm_din => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_din,
        e_f_strm_full_n => e_f_strm_full_n,
        e_f_strm_write => grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_write,
        ep => ep_reg_70,
        eb => eb_reg_75);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((e_f_strm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_ready = ap_const_logic_1)) then 
                    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                eb_reg_75 <= e_b_strm_dout;
                ep_reg_70 <= e_p_strm_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, e_f_strm_full_n, ap_CS_fsm_state4, ap_block_state1, grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((e_f_strm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_done)
    begin
        if ((grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(e_f_strm_full_n)
    begin
        if ((e_f_strm_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, e_p_strm_empty_n, e_b_strm_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (e_b_strm_empty_n = ap_const_logic_0) or (e_p_strm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, e_f_strm_full_n, ap_CS_fsm_state4)
    begin
        if (((e_f_strm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(e_f_strm_full_n, ap_CS_fsm_state4)
    begin
        if (((e_f_strm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_strm_read_assign_proc : process(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_b_strm_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            b_strm_read <= grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_b_strm_read;
        else 
            b_strm_read <= ap_const_logic_0;
        end if; 
    end process;


    e_b_strm_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, e_b_strm_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_b_strm_blk_n <= e_b_strm_empty_n;
        else 
            e_b_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_b_strm_read_assign_proc : process(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_b_strm_read, ap_CS_fsm_state3, e_b_strm_read_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            e_b_strm_read <= grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_b_strm_read;
        else 
            e_b_strm_read <= e_b_strm_read_local;
        end if; 
    end process;


    e_b_strm_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_b_strm_read_local <= ap_const_logic_1;
        else 
            e_b_strm_read_local <= ap_const_logic_0;
        end if; 
    end process;


    e_f_strm_blk_n_assign_proc : process(e_f_strm_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            e_f_strm_blk_n <= e_f_strm_full_n;
        else 
            e_f_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_f_strm_din_assign_proc : process(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_din, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            e_f_strm_din <= grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_din;
        else 
            e_f_strm_din <= ap_const_lv1_1;
        end if; 
    end process;


    e_f_strm_write_assign_proc : process(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_write, ap_CS_fsm_state3, e_f_strm_write_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            e_f_strm_write <= grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_f_strm_write;
        else 
            e_f_strm_write <= e_f_strm_write_local;
        end if; 
    end process;


    e_f_strm_write_local_assign_proc : process(e_f_strm_full_n, ap_CS_fsm_state4)
    begin
        if (((e_f_strm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            e_f_strm_write_local <= ap_const_logic_1;
        else 
            e_f_strm_write_local <= ap_const_logic_0;
        end if; 
    end process;


    e_p_strm_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, e_p_strm_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_p_strm_blk_n <= e_p_strm_empty_n;
        else 
            e_p_strm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    e_p_strm_read_assign_proc : process(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_p_strm_read, ap_CS_fsm_state3, e_p_strm_read_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            e_p_strm_read <= grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_e_p_strm_read;
        else 
            e_p_strm_read <= e_p_strm_read_local;
        end if; 
    end process;


    e_p_strm_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            e_p_strm_read_local <= ap_const_logic_1;
        else 
            e_p_strm_read_local <= ap_const_logic_0;
        end if; 
    end process;

    f_strm_din <= grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_din;

    f_strm_write_assign_proc : process(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            f_strm_write <= grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_f_strm_write;
        else 
            f_strm_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start <= grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_ap_start_reg;

    p_strm_read_assign_proc : process(grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_p_strm_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_strm_read <= grp_pred_pass_32_Pipeline_FILTER_PRED_PASS_fu_52_p_strm_read;
        else 
            p_strm_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
